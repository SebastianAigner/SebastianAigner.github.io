<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kotlin on Sebastian Aigner</title><link>https://sebi.io/tags/kotlin/</link><description>Recent content in kotlin on Sebastian Aigner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://sebi.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Idiomatic Kotlin: Solving Advent of Code Puzzles, Passport Validation</title><link>https://sebi.io/posts/2021-09-1-idiomatic-kotlin-advent-of-code-password-validation/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-09-1-idiomatic-kotlin-advent-of-code-password-validation/</guid><description>Today in “Idiomatic Kotlin”, we’re looking at day 4 of the Advent of Code 2020 challenges, in which we tackle a problem that feels as old as programming itself: input sanitization and validation.
Day 4. Passport processing We need to build a passport scanner that, given a batch of input text, can count how many passports are valid. You can find the complete task description at https://adventofcode.com/2020/day/4.
Like many challenges, we first inspect our input:</description></item><item><title>Exploring Kotlin Lists</title><link>https://sebi.io/posts/2021-07-08-exploring-kotlin-lists/</link><pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-07-08-exploring-kotlin-lists/</guid><description>This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!
Today, we&amp;rsquo;re talking all about lists! Lists are the most popular collection type in Kotlin for a good reason, and we’ll find out why together.
Lists What’s a list? If you&amp;rsquo;ve written Kotlin code before, you&amp;rsquo;ve definitely seen a list – they&amp;rsquo;re collections of ordered elements, where each element is accessible via an index.</description></item><item><title>Advanced Kotlin Collection Functionality</title><link>https://sebi.io/posts/2021-06-14-advanced-kotlin-collection-functionality/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-06-14-advanced-kotlin-collection-functionality/</guid><description>This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!
Today, we are learning about advanced functions that we can use to work with and manipulate all kinds of Kotlin collections!
Checking predicates: any, none and all Let’s warm up by having a look at a selection of functions that allow us to check conditions for our collection elements.</description></item><item><title>How I built an "Asteroids" game using Compose for Desktop (Part 1/2)</title><link>https://sebi.io/posts/2021-05-06-asteroids-in-compose-for-desktop/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-05-06-asteroids-in-compose-for-desktop/</guid><description>A while ago, I tweeted about a small game I had created on top of Compose for Desktop: A small clone of the classic arcade game Asteroids, in which you control a space ship with your mouse, and navigate the vastness of space, avoiding and breaking asteroids in the process.
Today, it&amp;rsquo;s time to take a look under the hood and understand how I built a basic version of this game, and how Compose for Desktop helped me achieve it in just one evening!</description></item><item><title>Tips &amp; tricks for building a game using Compose for Desktop (Part 2/2)</title><link>https://sebi.io/posts/2021-05-06-tips-and-tricks-building-a-game-in-compose-for-desktop/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-05-06-tips-and-tricks-building-a-game-in-compose-for-desktop/</guid><description>In the first part of my blog post series about building a small clone of the classic arcade game Asteroids on top of Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:
Rendering details – making sure game objects don&amp;rsquo;t escape our play area, and using a device-independent coordinate system for rendering Geometry and linear algebra – the secret sauce that makes the space ships fly Frame-independent movement – so that our game works consistently.</description></item><item><title>Diving into Kotlin collections</title><link>https://sebi.io/posts/2021-03-29-diving-into-kotlin-collections/</link><pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-03-29-diving-into-kotlin-collections/</guid><description>This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!
Kotlin Collections! You’ve heard of them, you’ve used them – so it makes sense to learn even more about them! Kotlin&amp;rsquo;s standard library provides awesome tools to manage groups of items, and we’re going to take a closer look!
Let&amp;rsquo;s see what types of collections the Kotlin standard library offers, and explore a common subset of operations that’s available for all of the collections you get in the standard library.</description></item><item><title>Kotlin Standard Library Safari: Strings</title><link>https://sebi.io/posts/2021-03-11-kotlin-stdlib-safari-strings/</link><pubDate>Thu, 11 Mar 2021 19:33:57 +0000</pubDate><guid>https://sebi.io/posts/2021-03-11-kotlin-stdlib-safari-strings/</guid><description>This blog post accompanies the first episode of our YouTube series &amp;ldquo;Kotlin Standard Library Safari&amp;rdquo;, which you can find on the official Kotlin YouTube channel, or watch here directly!
What&amp;rsquo;s Kotlin Standard Library Safari? In the &amp;ldquo;Kotlin Standard Library Safari&amp;rdquo; series, we’re going through the useful functionality the standard library in Kotlin has to offer, one subject at a time. In the process, we’re hopefully going to unearth some hidden gems together, which will come in handy the next time you write Kotlin code.</description></item><item><title>Migrating our Kotlin/JS app to the new IR compiler</title><link>https://sebi.io/posts/2021-03-09-migrating-our-kotlinjs-app-to-the-new-ir-compiler/</link><pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-03-09-migrating-our-kotlinjs-app-to-the-new-ir-compiler/</guid><description>Together with some colleagues, I maintain a small full-stack web application called CodeQuiz, which we built during a 48-hour hackathon at JetBrains, and use at events to gamify learning about Kotlin. I recently migrated its frontend which you can see below (and which is using the kotlin-react wrappers) to the new Kotlin/JS IR compiler backend.
The new compiler made a bunch of issues in our code visible, so I wanted to share my experience of migrating a Kotlin/JS app, and provide some hints on where to look when your app behaves unexpectedly after moving to the IR compiler.</description></item><item><title>Tips and tricks for your Kotlin code explorations</title><link>https://sebi.io/posts/2021-03-03-tips-and-trick-for-kotlin-code-explorations/</link><pubDate>Wed, 03 Mar 2021 15:33:57 +0000</pubDate><guid>https://sebi.io/posts/2021-03-03-tips-and-trick-for-kotlin-code-explorations/</guid><description>This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!
We’re going to take a look at some handy tips and tricks to help you explore Kotlin code, no matter whether it&amp;rsquo;s your own code or the code from the Kotlin standard library or any of your other dependencies. They will equip you to discover some of the goodies in the code you’re working with on your own.</description></item><item><title>Hosting Kotlin/JS on GitHub Pages via GitHub Actions</title><link>https://sebi.io/posts/2021-02-05-hosting-kotlin-js-on-github-pages/</link><pubDate>Fri, 05 Feb 2021 19:33:57 +0000</pubDate><guid>https://sebi.io/posts/2021-02-05-hosting-kotlin-js-on-github-pages/</guid><description>GitHub Pages is an easy way to host your Kotlin/JS application - and in combination with the continuous integration service GitHub Actions, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can build and test your application on GitHub&amp;rsquo;s CI, and get your Kotlin/JS web apps published for free.
In this post, we are going to configure GitHub Actions and Pages so that new code pushed to our repository or added via pull request is automatically validated (by having the project built and our tests run on GitHub&amp;rsquo;s servers), and code pushed to the main branch of our project is automatically made available to the public (by generating and publishing production artifacts of our app).</description></item></channel></rss>