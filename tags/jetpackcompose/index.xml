<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jetpackcompose on Sebastian Aigner</title><link>https://sebi.io/tags/jetpackcompose/</link><description>Recent content in jetpackcompose on Sebastian Aigner</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://sebi.io/tags/jetpackcompose/index.xml" rel="self" type="application/rss+xml"/><item><title>How I built an "Asteroids" game using Compose for Desktop (Part 1/2)</title><link>https://sebi.io/posts/2021-05-06-asteroids-in-compose-for-desktop/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-05-06-asteroids-in-compose-for-desktop/</guid><description>A while ago, I tweeted about a small game I had created on top of Compose for Desktop: A small clone of the classic arcade game Asteroids, in which you control a space ship with your mouse, and navigate the vastness of space, avoiding and breaking asteroids in the process.
Today, it&amp;rsquo;s time to take a look under the hood and understand how I built a basic version of this game, and how Compose for Desktop helped me achieve it in just one evening!</description></item><item><title>Tips &amp; tricks for building a game using Compose for Desktop (Part 2/2)</title><link>https://sebi.io/posts/2021-05-06-tips-and-tricks-building-a-game-in-compose-for-desktop/</link><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid>https://sebi.io/posts/2021-05-06-tips-and-tricks-building-a-game-in-compose-for-desktop/</guid><description>In the first part of my blog post series about building a small clone of the classic arcade game Asteroids on top of Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:
Rendering details – making sure game objects don&amp;rsquo;t escape our play area, and using a device-independent coordinate system for rendering Geometry and linear algebra – the secret sauce that makes the space ships fly Frame-independent movement – so that our game works consistently.</description></item></channel></rss>