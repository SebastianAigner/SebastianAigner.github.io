<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-28T00:57:39+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">sebi.io</title><subtitle>This is my corner of the internet. Tech makes me happy, so I try to note down and share my adventures here. I don&apos;t have a really specific plan on where I am going with this, so I&apos;ll use it as my notepad to jot down ideas, concepts, and tutorials, so that I and others will be able to revisit them whenever they&apos;d like.</subtitle><entry><title type="html">Idiomatic Kotlin: Solving Advent of Code Puzzles, Passport Validation</title><link href="http://localhost:4000/2021/09/01/Idiomatic-Kotlin-Advent-of-Code-Password-Validation.html" rel="alternate" type="text/html" title="Idiomatic Kotlin: Solving Advent of Code Puzzles, Passport Validation" /><published>2021-09-01T00:00:00+02:00</published><updated>2021-09-01T00:00:00+02:00</updated><id>http://localhost:4000/2021/09/01/Idiomatic-Kotlin-Advent-of-Code-Password-Validation</id><content type="html" xml:base="http://localhost:4000/2021/09/01/Idiomatic-Kotlin-Advent-of-Code-Password-Validation.html">&lt;p&gt;Today in “Idiomatic Kotlin”, we’re looking at &lt;a href=&quot;https://adventofcode.com/2020/day/4&quot;&gt;day 4 of the Advent of Code 2020 challenges&lt;/a&gt;, in which we tackle a problem that feels as old as programming itself: input sanitization and validation.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/-kltG4Ztv1s?si=qzN8HpNJOgM0Ih47&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;day-4-passport-processing&quot;&gt;Day 4. Passport processing&lt;/h2&gt;

&lt;p&gt;We need to build a passport scanner that, given a batch of input text, can count how many passports are &lt;em&gt;valid.&lt;/em&gt; You can find the complete task description at &lt;a href=&quot;https://adventofcode.com/2020/day/4*&quot;&gt;https://adventofcode.com/2020/day/4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like many challenges, we first inspect our input:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
byr:1937 iyr:2017 cid:147 hgt:183cm

iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
hcl:#cfa07d byr:1929

hcl:#ae17e1 iyr:2013
eyr:2024
ecl:brn pid:760753108 byr:1931
hgt:179cm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The input is a batch of travel documents in a text file, separated by blank lines. Each &lt;em&gt;passport&lt;/em&gt; is represented as a sequence of key-colon-value pairs separated by spaces or newlines. &lt;em&gt;Our&lt;/em&gt; challenge is finding out how many passports are valid. For part one, “valid” means that they need to have all the required fields outlined by the security personnel: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iyr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eyr&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hgt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hcl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; (we conveniently ignore their request to validate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cid&lt;/code&gt; field).&lt;/p&gt;

&lt;h2 id=&quot;solving-day-4-part-1&quot;&gt;Solving Day 4, Part 1&lt;/h2&gt;

&lt;p&gt;Like many challenges, we start by reading our puzzle input as text and trim off any extraneous whitespace at the beginning and the end of the file. As per the description, passports are always separated by blank lines. A blank line is just two “returns”, or newlines, in a row, so we’ll use this to split our input string into the individual passports:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;passports&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/day04/input.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\n\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\r\n\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Note that depending on your operating system, the line separator in text files is different: On Windows, it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;, on Linux and macOS, it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\n&lt;/code&gt;. Kotlin’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;split&lt;/code&gt; method takes an arbitrary number of delimiters, allowing us to cover both cases directly.)&lt;/p&gt;

&lt;p&gt;We now have a list of passport strings. However, working with lists of raw strings can quickly get confusing. Let’s use Kotlin’s expressive type system to improve the situation and encapsulate the string in a very basic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passport&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then just map the results of our split-up input to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passport&lt;/code&gt; objects:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From the problem description, we remember that key-value pairs are either separated by spaces or newlines within a single passport. Therefore, to get the individual pairs, we once again split our input. The delimiters, in this case, are either a space or one of the newline sequences.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasAllRequiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fieldsWithValues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then extract the key from each passport entry. We can do so by mapping our combined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fieldsWithValues&lt;/code&gt; to &lt;em&gt;only&lt;/em&gt; the substring that comes before the colon:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasAllRequiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fieldsWithValues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fieldNames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldsWithValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substringBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The result of our function will be whether the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fieldNames&lt;/code&gt; we extracted contain all required fields. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requiredFields&lt;/code&gt; collection can be taken directly from the problem statement and translated into a list:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;requiredFields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;byr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eyr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hgt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hcl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ecl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*&quot;cid&quot;*/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To calculate our final number, and get our first gold star for the challenge, we need to count the passports for which our function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hasAllRequiredFields&lt;/code&gt; returns true:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasAllRequiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we have successfully solved the first part of the challenge and can set our sights on the next star in our journey.&lt;/p&gt;

&lt;p&gt;Find the full code for the first part of the challenge on &lt;a href=&quot;https://github.com/kotlin-hands-on/advent-of-code-2020/blob/master/src/day04/day4_1.kt&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;solving-day-4-part-2&quot;&gt;Solving Day 4, Part 2&lt;/h2&gt;

&lt;p&gt;In part two of the challenge, we also need to ensure that each field on the passport contains a valid value. We are given an additional list of rules to accomplish this task, which you can again find in the &lt;a href=&quot;https://adventofcode.com/2020/day/4&quot;&gt;problem description&lt;/a&gt;. Years need to fall into specific ranges, as does a person’s height depending on the unit of measurement. Colors need to come from a prespecified list or follow certain patterns, and numbers must be correctly formatted.&lt;/p&gt;

&lt;h3 id=&quot;a-refactoring-excursion&quot;&gt;A refactoring excursion&lt;/h3&gt;

&lt;p&gt;Before we start building the solution for part 2, let’s briefly reflect on our code and find possible changes that will make adding this functionality easier for us. At this point in the challenge, we &lt;em&gt;know&lt;/em&gt; that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passport&lt;/code&gt; class will need access to the different field names and their associated values. The classical data structure to store such kind of associative-dictionary information is a map. Let’s refactor our code to store passport information in a map instead of a string.&lt;/p&gt;

&lt;p&gt;Because turning an input string into a map is still a process that’s associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passport&lt;/code&gt;, I like encapsulating such logic in a companion object “factory” function. In this case, we can aptly call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromString&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The implementation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fromString&lt;/code&gt; partially reuses the normalization logic we had previously used in the first part of this challenge and expands it to create a map directly via Kotlin’s &lt;code&gt;[associate](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/associate.html)&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fromString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fieldsAndValues&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\r\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldsAndValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;associate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passport&lt;/code&gt; object now encapsulates a map of string keys and string values:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Passport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interestingly enough, this change makes the implementation of the first part of our challenge trivial. We can simply check that the key set of our map contains all required fields:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasAllRequiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containsAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;returning-to-solving-part-2&quot;&gt;Returning to solving part 2&lt;/h3&gt;

&lt;p&gt;For the second part of the challenge, we consider a passport valid if it contains all the required fields and has values that correspond to the official rules.&lt;/p&gt;

&lt;p&gt;To ensure that all fields have valid values, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; function to assert that a predicate holds true for every single key-value pair in our map:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasValidValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can distinguish the different types of fields using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; expression. In this first step, we distinguish the different cases based on the keys in our map:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each key we know gets a branch in this when statement. They all need to return a boolean value – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the field is okay, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; if the field violates the rules. The surrounding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; predicate will then use those results to determine whether the passport as a whole is valid.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byr&lt;/code&gt; (Birth Year), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iyr&lt;/code&gt; (Issue Year), and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eyr&lt;/code&gt; (Expiration Year) fields all require their value to be a 4-digit number falling into a particular range:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;byr&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2002&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;iyr&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2010&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;eyr&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2030&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that our combined use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toIntOrNull&lt;/code&gt; together with the infix function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; allows us to discard any non-numeric values, and ensure that they fall in the correct range.&lt;/p&gt;

&lt;p&gt;We can apply a very similar rule to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid&lt;/code&gt; (Passport ID) field. We ensure that the length of the value is correct and ensure that all characters belong to the set of digits:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;pid&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Validating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecl&lt;/code&gt; (eye color) just requires us to check whether the input is in a certain set of values, similar to the first part of our challenge:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;ecl&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;amb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;brn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;gry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;grn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hzl&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;oth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, we have two more fields to validate: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hgt&lt;/code&gt; (Height) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hcl&lt;/code&gt; (Hair Color). Both of them are a bit more tricky. Let’s look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hgt&lt;/code&gt; field first.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hgt&lt;/code&gt; (Height) field can contain a measurement either in centimeters or inches. Depending on the unit used, different values are allowed. Thankfully, both “cm” and “in” are two-character suffixes. This means we can again use Kotlin’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; function, grab the last two characters in the field value and differentiate the validation logic for centimeters and inches. Like our other number-validation logic, we parse the integer and check whether it belongs to a specific range. To do so, we also remove the unit suffix:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;hgt&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;takeLast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;cm&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;193&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;in&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;76&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last field to validate is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hcl&lt;/code&gt; (Hair Color), which expects a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; followed by exactly six hexadecimal digits – digits from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;. While Kotlin can parse base-16 numbers, we can use this case to show off the sledgehammer method for validating patterns – regular expressions. Those can be defined as Kotlin strings and converted using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toRegex&lt;/code&gt; function. Triple-quoted strings can help with escape characters:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;hcl&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;#[0-9a-f]{6}&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toRegex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our hand-crafted pattern matches exactly one hashtag, then six characters from the group of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As a short aside for performance enthusiasts: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toRegex&lt;/code&gt; is a relatively expensive function, so it may be worth moving this function call into a constant. The same also applies to the set used in the validation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ecl&lt;/code&gt; – currently, it is initialized on each test.&lt;/p&gt;

&lt;p&gt;Because the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt;-block is used as an expression, we need to ensure that all possible branches are covered. In our case, that just means adding an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; branch, which simply returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; – just because a passport has a field we don’t know about doesn’t mean it can’t still be valid.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we have covered every rule outlined to us by the problem statement. To get our reward, we can now just count the passports that contain all required fields and have valid values:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;passports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasAllRequiredFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasValidValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We end up with a resulting number, which we can exchange for the second star. We’re clear for boarding our virtual flight. Though this was probably not the last challenge that awaits us…&lt;/p&gt;

&lt;p&gt;Find the complete solution for the second part of the challenge on &lt;a href=&quot;https://github.com/kotlin-hands-on/advent-of-code-2020/blob/master/src/day04/day4.kt&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;For today’s challenge, we came up with an elegant solution to validate specific string information, which we extracted using utility functions offered by the Kotlin standard library. As the challenge continued, we reflected on our code, identified more fitting data structures, and changed our logic to accommodate it. Using Kotlin’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt; statement, we were able to keep the validation logic concise and all in one place. We saw multiple different ways of how to validate input – working with ranges, checking set membership, or matching a particular regular expression, for example.&lt;/p&gt;

&lt;p&gt;Many real-world applications have similar requirements for input validation. Hopefully, some of the tips and tricks you’ve seen in the context of this little challenge will also be helpful when you need to write some validation logic on your own.&lt;/p&gt;

&lt;p&gt;To continue puzzling yourself, check out &lt;a href=&quot;https://adventofcode.com/&quot;&gt;adventofcode.com&lt;/a&gt;, whose organizers kindly permitted us to use their problem statements for this series.&lt;/p&gt;

&lt;p&gt;If you want to see more solutions for Advent of Code challenges in the form of videos, subscribe to our &lt;a href=&quot;https://www.youtube.com/kotlin&quot;&gt;YouTube channel&lt;/a&gt; and hit the bell to get notified when we continue our idiomatic journey. More puzzle solutions are coming your way!&lt;/p&gt;</content><author><name></name></author><category term="kotlin," /><category term="adventofcode," /><category term="codenewbie," /><category term="100daysofcode" /><summary type="html">Today in “Idiomatic Kotlin”, we’re looking at day 4 of the Advent of Code 2020 challenges, in which we tackle a problem that feels as old as programming itself: input sanitization and validation.</summary></entry><entry><title type="html">Exploring Kotlin Lists</title><link href="http://localhost:4000/2021/07/08/Exploring-Kotlin-Lists.html" rel="alternate" type="text/html" title="Exploring Kotlin Lists" /><published>2021-07-08T00:00:00+02:00</published><updated>2021-07-08T00:00:00+02:00</updated><id>http://localhost:4000/2021/07/08/Exploring-Kotlin-Lists</id><content type="html" xml:base="http://localhost:4000/2021/07/08/Exploring-Kotlin-Lists.html">&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href=&quot;https://kotl.in/video&quot;&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CDWy16UDeLQ?si=-NrA7Nvn6KpkrsW5&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Today, we’re talking all about lists!&lt;/strong&gt; Lists are the most popular collection type in Kotlin for a good reason, and we’ll find out why together.&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;h3 id=&quot;whats-a-list&quot;&gt;What’s a list?&lt;/h3&gt;

&lt;p&gt;If you’ve written Kotlin code before, you’ve definitely seen a list – they’re collections of ordered elements, where each element is accessible via an index. As such, they’re one of the basic building blocks for a lot of Kotlin code.&lt;/p&gt;

&lt;h3 id=&quot;creating-lists&quot;&gt;Creating lists&lt;/h3&gt;

&lt;p&gt;If you’re creating lists on your own, you’re most likely using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listOf&lt;/code&gt;&lt;/a&gt; function, which takes a variable number of arguments, and those become the elements of your list. Even in this blog post series, we’ve created a list like that about a hundred times:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A little lesser known is the ability to create lists via the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;&lt;/a&gt; constructor function. Here, we pass two parameters – the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; of the list, and an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; function that creates each of the elements in our list. That function we pass gets the element index as its parameter, which we can use to adjust the item content:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;No. $idx&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [No. 0, No. 1, No. 2, No. 3, No. 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Of course, lists can come from other places as well: types like collections, iterables, and others often feature a &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-list.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;For example, in the case of a string, we get a list of its characters:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;word-salad&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [w, o, r, d, -, s, a, l, a, d]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Given a map of placements and the associated medals, we can call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt; on that to get a list of key-value pairs:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Gold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Silver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bronze&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [(1, Gold), (2, Silver), (3, Bronze)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sequences, ranges, and progressions behave similarly. They materialize their values, and put them in a list when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt;. As an example, we can consider a random sequence of numbers, or the inclusive integer range from zero to ten:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;generateSequence&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;takeIf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [73, 77, 69, 79, 71, 64]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An extra case worth mentioning is calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt; on something that already is a list. This creates brand-new copy of the original list. We can see this in the following example, where we create a mutable list with a few numbers. By calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt;, we obtain a new working copy:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;otherList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [5, 2, 3]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, when the original list is changed, the working copy we just created does not contain any of the changes applied to the original collection.&lt;/p&gt;

&lt;h3 id=&quot;accessing-list-items&quot;&gt;Accessing list items&lt;/h3&gt;

&lt;p&gt;To get items out of our lists, we have multiple options. The most basic way of doing so is using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt;&lt;/a&gt; function, together with an index:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍔&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🌭&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍕&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 🌭&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But if you ever type out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.get&lt;/code&gt; manually, you’ll see that IntelliJ IDEA already gives you the helpful hint to use some much more popular syntactic sugar for it – the indexed access operator, denoted by the brackets with an index:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 🌭&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are also some additional flavors of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; function which we can explore. Two of those that come to mind are &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-else.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrElse&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrNull&lt;/code&gt;&lt;/a&gt;. They help us handle cases where we might be accessing an index that falls out of bounds (which can either be a negative index, or an index that’s larger than the last index in our collection.)&lt;/p&gt;

&lt;p&gt;Using the default indexed access causes an &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-index-out-of-bounds-exception/&quot;&gt;exception&lt;/a&gt; when provided a parameter that’s out of bounds:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Index 3 out of bounds for length 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can use &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrNull&lt;/code&gt;&lt;/a&gt; to short-circuit our return value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. Alternatively, we can use &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-else.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrElse&lt;/code&gt;&lt;/a&gt; to compute a default value to be used instead. The default value is computed based on a passed lambda, which also receives the index:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍔&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🌭&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍕&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// null&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrElse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;There&apos;s no index $it!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;😔&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// There&apos;s no index 3!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 😔&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These special functions are only necessary to work with indexes that might fall out of bounds, though. &lt;a href=&quot;https://kotlinlang.org/docs/null-safety.html&quot;&gt;Nullability&lt;/a&gt;, for example, is handled the same way as you would in any other situation in Kotlin: using the power of the Elvis operator, smart-casts and friends.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;listOfNullableItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOfNullableItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;slicing&quot;&gt;Slicing&lt;/h3&gt;

&lt;p&gt;Of course, we can go beyond getting individual items out of our list. Because a list is a collection like any other, we have access to the same &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt;&lt;/a&gt; functions that were introduced in the &lt;em&gt;&lt;a href=&quot;https://dev.to/kotlin/diving-into-kotlin-collections-587o&quot;&gt;Diving into Kotlin collections&lt;/a&gt;&lt;/em&gt; post.&lt;/p&gt;

&lt;p&gt;But lists have a special way of retrieving multiple items - the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/slice.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slice&lt;/code&gt;&lt;/a&gt; function!&lt;/p&gt;

&lt;p&gt;When we give this function a bunch of indexes, it returns the elements at those places in our collection. In this example, we’re passing a list with index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0, 2, 4&lt;/code&gt;, and get those items from our list of letters:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [a, c, e]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of writing out all the indices by hand, we could also use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntRange&lt;/code&gt;s or progressions to specify the indexes. For example, we could request “all items from 0 through 3”, or specify a custom step-size of 2. We could even pull out some items in reverse order, if we create a progression that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;downTo&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [a, b, c, d]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [a, c, e]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;downTo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [c, b, a]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you may suspect, this &lt;em&gt;list&lt;/em&gt; of list features is not quite exhaustive – as always, there’s some more to explore even on this subject. But let’s put that on the back burner for a bit, and move on to a special kind of list – it’s time to talk about &lt;em&gt;mutable lists&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id=&quot;mutable-lists&quot;&gt;Mutable Lists&lt;/h2&gt;

&lt;p&gt;What’s so special about mutable lists? Well, you can &lt;em&gt;mutate&lt;/em&gt; them! That, of course, doesn’t mean that these lists will turn into zombies (🧟‍♂️), but that you can change their content. If we consult an excerpt of a class hierarchy, we can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableList&lt;/code&gt; specializes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;, meaning everything we’ve learned about lists so far also works for their mutable counterpart, plus some extra functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stdlibsafari5/nrg0js7pl6435klg2gm0.png&quot; alt=&quot;list-specialization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s precisely that extra functionality that we’re interested in right now!&lt;/p&gt;

&lt;h3 id=&quot;creating-mutable-lists&quot;&gt;Creating mutable lists&lt;/h3&gt;

&lt;p&gt;Once again, mutable lists are commonly created via the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutableListOf&lt;/code&gt;&lt;/a&gt; function, with a bunch of values as arguments. And, wherever you were able to find a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toList&lt;/code&gt; method, as discussed previously, you’ll probably also find a &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-mutable-list.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toMutableList&lt;/code&gt;&lt;/a&gt;. That also includes other lists and mutable lists – where you’ll get a fresh copy when calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toMutableList&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toMutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toMutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;add--remove--update&quot;&gt;Add / Remove / Update&lt;/h3&gt;

&lt;p&gt;Let’s move on to the core of this subject – the ability to change content. That starts with adding something to the collection. If we want to add an extra number to the end of our mutable list we can do so via the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/add.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt;&lt;/a&gt; function, or by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+=&lt;/code&gt; operator shorthand, both of which append an item to the end of the list.&lt;/p&gt;

&lt;p&gt;If we know &lt;em&gt;where&lt;/em&gt; in the collection we want our item to go, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; function also accepts an index, which inserts the new element at that position and moves the surrounding elements to accommodate it. In the same way, we can also add a whole other collection to our mutable list:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, 4, 4]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 10, 3, 4, 4]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 10, 3, 4, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re of course not constrained to just adding elements to our list – we can also remove them. If we know what element we want to get rid of, we can do that via the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/remove.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt;&lt;/a&gt; function or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-=&lt;/code&gt; operator shorthand, which removes from our collection &lt;em&gt;a single instance&lt;/em&gt; of the element we provide. In this example, after calling -= and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt;, we got rid of two of the 3s in our original collection – because each invocation removed one of them.&lt;/p&gt;

&lt;p&gt;Alternatively, we can also pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-=&lt;/code&gt; operator a collection of elements. In this case, the operator acts as a shorthand for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeAll&lt;/code&gt; function. Here, it looks at every element in the collection we pass, and &lt;em&gt;removes all instances of them&lt;/em&gt; in our original, mutable collection. (This is an important distinction to make!) So, by passing 1 and 4 as a collection, we remove &lt;em&gt;all instances&lt;/em&gt; of those numbers from our mutable list, and we’re left with only 2 and 3 at the end.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 3, 4, 4, 4]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we know the index where we want to kick an item out, we use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/remove-at.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeAt&lt;/code&gt;&lt;/a&gt; function instead. For example, we could remove the second element in our list, which resides at index 1.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 3, 3, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To update an item, we most commonly use the &lt;a href=&quot;https://kotlinlang.org/docs/operator-overloading.html#indexed-access-operator&quot;&gt;&lt;em&gt;indexed access operator&lt;/em&gt;&lt;/a&gt; – so the brackets – together with an assignment. That one calls the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/set.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/a&gt; function with that index and element under the hood, and switches out the item at the specified index – in this case, trading a “b” for an “a”.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [a, a, c, d, e]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;fill-and-clear&quot;&gt;Fill and Clear&lt;/h3&gt;

&lt;p&gt;In certain situations, we might want to turn all elements of our list into the same element – like zeroing out a buffer before reusing it. This is something we can do using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fill.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fill&lt;/code&gt;&lt;/a&gt; function, which replaces each element with the same value we specify. If we look at a list of fruits, for example, and suddenly realize that all of them are really just sugar, we use fill to replace them with candy (🍬). While that metaphor may not be &lt;em&gt;entirely scientifically accurate&lt;/em&gt;, it’s tasty nonetheless!&lt;/p&gt;

&lt;p&gt;And when we want to wipe our collection clean, the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/clear.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear&lt;/code&gt;&lt;/a&gt; function can help with removing all elements from a collection – in our case, getting rid of all the candy:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍉&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍊&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🥝&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// wait, it&apos;s all sugar?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍬&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍬, 🍬, 🍬]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ... nom nom&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perhaps unsurprisingly, mutable lists grow and shrink automatically to accommodate all your items, so you can have an arbitrary number of elements in your collection. This might be obvious, but it’s so darn convenient, so I figured I’d mention it. The things we take for granted!&lt;/p&gt;

&lt;h3 id=&quot;in-place-modifications&quot;&gt;In-place modifications&lt;/h3&gt;

&lt;p&gt;Thinking back to some of the previous entries of this series, we’ve seen a number of neat functions which we wouldn’t want to miss for mutable collections either – things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sorted&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shuffled&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reversed&lt;/code&gt;. However, those don’t modify the original collection.&lt;/p&gt;

&lt;p&gt;Luckily for us, these functions also have a mutable counterpart. So, when we want to sort, shuffle, or reverse a mutable list in place – instead of creating a new, separate copy with the effects applied – we use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sort()&lt;/code&gt;&lt;/a&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sorted()&lt;/code&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/shuffle.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shuffle()&lt;/code&gt;&lt;/a&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shuffled()&lt;/code&gt;, and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reverse.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse()&lt;/code&gt;&lt;/a&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reversed()&lt;/code&gt; functions:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [3, 1, 4, 1, 5, 9]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toMutableList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [5, 1, 1, 3, 4, 9]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 1, 3, 4, 5, 9]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [9, 5, 4, 3, 1, 1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mutable lists also offer the possibility to remove or keep &lt;em&gt;all&lt;/em&gt; elements that fulfill a certain predicate. The &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/remove-all.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeAll&lt;/code&gt;&lt;/a&gt; function can remove all elements that match the predicate we specify. Let’s say we’re not a fan of small numbers in our collection, and only want to keep numbers that are 5 or above – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;removeAll&lt;/code&gt; helps us do exactly that.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [5, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/retain-all.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retainAll&lt;/code&gt;&lt;/a&gt; function is the opposite, and only keeps those elements in the mutable list that match. If we want to retain every character in our collection that is a letter, we do that with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retainAll&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;3&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;d&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;5&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;retainAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isLetter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [a, b, d]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might feel a bit familiar to you, and rightfully so, because these are essentially the mutating equivalents of the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterNot&lt;/code&gt;&lt;/a&gt; functions.&lt;/p&gt;

&lt;h3 id=&quot;views-on-lists&quot;&gt;Views on Lists&lt;/h3&gt;

&lt;p&gt;The last topic on today’s agenda is views on lists. That name already hints at what they allow us to do – they allow us to look at the elements in our list from a different perspective – let’s see what that means.&lt;/p&gt;

&lt;p&gt;Let’s assume we have a collection of fruits. To create a view, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/sub-list.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subList&lt;/code&gt;&lt;/a&gt; function, which takes a beginning and end index, which determines which elements should be “visible” in the view. By having a look at an example sublist, we can see that it contains the elements from our original collections based on the indices we specify (with the upper bound being exclusive):&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍉&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍊&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🥝&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍏&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍊, 🥝, 🍏]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because this is only a &lt;em&gt;view&lt;/em&gt;, and not a copy of our original collection, changes are automatically visible. That means if we change the orange to a banana in the underlying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fruits&lt;/code&gt; list, then our sublist will reflect that change:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍌&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍌, 🥝, 🍏]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What may be even more interesting is that this sublist is in itself mutable, as well! If we change the green apple in our sublist to a pineapple, and have a look at our original fruits collection again, we see that the change is visible from here as well:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍍&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍉, 🍌, 🥝, 🍍]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or, we can use the fill function which we’ve learned about earlier to turn an interval inside of our fruit-list back into candy, again:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍬&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍉, 🍬, 🍬, 🍬]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To reiterate; all of that works because these aren’t two different collections – there is only one collection, and  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subList&lt;/code&gt; has just given us a different perspective on that list!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An important note on the topic of sublists:&lt;/strong&gt; They are only well-defined as long as the underlying, original list is &lt;em&gt;not structurally changed&lt;/em&gt;. Changes affecting the size of the list, for example, automatically cause any views that were previously returned by invoking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subList&lt;/code&gt; to have undefined behavior.&lt;/p&gt;

&lt;p&gt;For a common case, which is looking at a list backwards, the Kotlin standard library also comes with the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/as-reversed.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asReversed&lt;/code&gt;&lt;/a&gt; function. It provides a backwards view of the underlying list. Once again, changes made in the view are visible in the original collection, and vice versa. As you can see in the following example, turning the orange into a banana in our original list also changes what we see in the reversed view. Altering it back to a pineapple via our reversed view also alters our original mutable list:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🍉&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍊&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🥝&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍏&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stiurf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asReversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stiurf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍏, 🥝, 🍊, 🍉]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍌&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stiurf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍏, 🥝, 🍌, 🍉]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stiurf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🍍&quot;&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🍉, 🍍, 🥝, 🍏]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These types of “views” are actually available for non-mutable lists, as well, and allow you to pass around different sub-selections of your collections without having to create new copies every time – however, this seemed like a topic that would be nicer to illustrate with the mutable variant, to drive the point home that there really is only one underlying collection.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;With that, we have reached the end of today’s expedition! I hope some of the stuff you’ve seen today is helping you strengthen your understanding of Kotlin lists. When you’re  writing Kotlin code the next time, see if you can apply some of the stuff we’ve talked about today – whether it’s slicing a collection, using sub-lists, or handling out-of-bounds situations for lists elegantly with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrNull&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getOrElse&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;Now, it’s time for all of you to go and explore some more Kotlin! Take care, and see you in the next one!&lt;/p&gt;</content><author><name></name></author><category term="kotlin," /><category term="programming," /><category term="android," /><category term="productivity" /><summary type="html">This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!</summary></entry><entry><title type="html">Advanced Kotlin Collection Functionality</title><link href="http://localhost:4000/2021/06/14/Advanced-Kotlin-Collection-Functionality.html" rel="alternate" type="text/html" title="Advanced Kotlin Collection Functionality" /><published>2021-06-14T00:00:00+02:00</published><updated>2021-06-14T00:00:00+02:00</updated><id>http://localhost:4000/2021/06/14/Advanced-Kotlin-Collection-Functionality</id><content type="html" xml:base="http://localhost:4000/2021/06/14/Advanced-Kotlin-Collection-Functionality.html">&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href=&quot;https://kotl.in/video&quot;&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/N4CpLxGJlq0?si=BD4VNf3kkvCEtJiq&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Today, we are learning about advanced functions that we can use to work with and manipulate all kinds of Kotlin collections!&lt;/p&gt;

&lt;h2 id=&quot;checking-predicates-any-none-and-all&quot;&gt;Checking predicates: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Let’s warm up by having a look at a selection of functions that allow us to check conditions for our collection elements.&lt;/p&gt;

&lt;p&gt;They’re called &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt;&lt;/a&gt;. Each of them takes a &lt;em&gt;predicate&lt;/em&gt; – so a function that returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; – and checks whether the collection fits this predicate.&lt;/p&gt;

&lt;p&gt;Let’s say we have a group of friends (which is really just a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;Person&amp;gt;&lt;/code&gt;, each featuring a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;age&lt;/code&gt;, and maybe a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;driversLicense&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;driversLicense&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;friendGroup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we want to check if the group can travel by car, we want to check if &lt;em&gt;any&lt;/em&gt; of them have a driver’s license – so we use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;&lt;/a&gt; function. It returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if there is &lt;em&gt;at least one element&lt;/em&gt; in our collection for which the predicate returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;groupCanTravel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driversLicense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As another example, let’s say we want to check if this group of friends is allowed to enter a club – for this, we would need to make sure that &lt;em&gt;none&lt;/em&gt; of the folks in the group are underage!&lt;/p&gt;

&lt;p&gt;Here, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt;&lt;/a&gt; function, which only returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; when there is &lt;em&gt;not a single element in our collection&lt;/em&gt; that holds true for our predicate:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;groupGetsInClub&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The third function in the bunch is the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt;&lt;/a&gt; function. At this point, you can probably spot the pattern – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, if each and every element in our collection matches our predicate. We could use it to check whether all names in our friend group are short:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;groupHasShortNames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;friendGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;predicates-for-empty-collections&quot;&gt;Predicates for empty collections&lt;/h3&gt;

&lt;p&gt;While on the topic, let’s have a little brain teaser: How do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; behave for &lt;em&gt;empty collections&lt;/em&gt;?&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nobody&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emptyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// what happens here?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;any&lt;/code&gt; first. There is no element that can satisfy the predicate, so it returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nobody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;driversLicense&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same goes for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;none&lt;/code&gt; – there is no function that can violate our predicate, so it returns true:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nobody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;all&lt;/code&gt; function, however, returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; with an empty collection. This may surprise you in the first moment:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nobody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this is quite intentional and sound: You can’t name an element that &lt;em&gt;violates&lt;/em&gt; the predicate. Therefore, the predicate has to be true for &lt;em&gt;all elements in the collection&lt;/em&gt; – even if there are &lt;em&gt;none&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;This might feel a bit mind-bending to think about at first, but you’ll find that this concept, which is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Vacuous_truth&quot;&gt;vacuous truth&lt;/a&gt;, actually plays very well with checking conditions, and expressing logic in program code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stdlibsafari4/thg07e0ao215ck2lwm1z.png&quot; alt=&quot;&amp;quot;Vacuous truth&amp;quot; on Wikipedia&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;collection-parts-chunked-and-windowed&quot;&gt;Collection parts: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;With our brain freshly teased, let’s move on to the next topic, and learn about how to break collections into parts!&lt;/p&gt;

&lt;h3 id=&quot;the-chunked-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;If we have a collection that just contains a bunch of items, we can cut up the list into individual chunks of a certain size by using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/chunked.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt;&lt;/a&gt; function. What we get back is a list of lists, where each element is a _chunk _of our original list:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🌱&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🚀&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;💡&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🐧&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;⚙️&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🤖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;📚&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chunked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[🌱, 🚀, 💡], [🐧, ⚙️, 🤖], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we break our list of random objects (represented with emojis) apart, using a chunk size of 3.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first &lt;em&gt;element&lt;/em&gt; in our result is in itself a &lt;em&gt;list&lt;/em&gt; which contains our first three objects – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[🌱, 🚀, 💡]&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second element is once again a chunk, and contains the three elements that follow after that – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[🐧, ⚙️, 🤖]&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The last element is also a chunk – but since we ran out of elements to fill it with three items, it only contains the book stack - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[📚]&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In typical standard library fashion, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt; function also provides a little bit of extra power. To immediately transform the chunks we just created, we can apply a &lt;em&gt;transformation function&lt;/em&gt;. For example, we can reverse the order of elements in the resulting lists, without having to do another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; call separately:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chunked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[💡, 🚀, 🌱], [🤖, ⚙️, 🐧], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To summarize: the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt; function cuts our original collection into lists of lists, where each list has the specified size.&lt;/p&gt;

&lt;h3 id=&quot;the-windowed-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;Closely related is the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/windowed.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt;&lt;/a&gt; function. It also returns a list of lists from our collection. Instead of cutting it up into pieces, however, this function generates a “sliding window” of our collection:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;windowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[🌱, 🚀, 💡], [🚀, 💡, 🐧], [💡, 🐧, ⚙️], [🐧, ⚙️, 🤖], [⚙️, 🤖, 📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The first window is once again the first three elements – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[🌱, 🚀, 💡]&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The next window is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[🚀, 💡, 🐧]&lt;/code&gt; – we simply “moved” our window of size 3 over by one, which includes some overlap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt; function can also be customized. We can change both &lt;em&gt;window&lt;/em&gt; and &lt;em&gt;step&lt;/em&gt; size, the latter being the number of elements that the window should “slide along” for each step:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;windowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partialWindows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[🌱, 🚀, 💡, 🐧], [💡, 🐧, ⚙️, 🤖], [⚙️, 🤖, 📚], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see in the example above, we can also control whether our result should contain &lt;em&gt;partial windows&lt;/em&gt;. This changes the behavior when we’ve reached the end of our input collection, and we’re running out of elements.&lt;/p&gt;

&lt;p&gt;With partial windows enabled, we just &lt;em&gt;keep sliding&lt;/em&gt;, and we get the last elements trickling in, in the form of smaller windows, until we get a window which once again only contains the last element from our input collection – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[⚙️, 🤖, 📚], [📚]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt; also allows us to perform an additional transformation at the end, which can modify the individual windows directly:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;windowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [[🐧, 💡, 🚀, 🌱], [🤖, ⚙️, 🐧, 💡], [📚, 🤖, ⚙️], [📚]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;un-nesting-collections-flatten-and-flatmap&quot;&gt;Un-nesting Collections: Flatten and Flatmap&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chunked&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt; functions, along with some others all return nested collections – lists of lists. What if we want to &lt;em&gt;un-nest&lt;/em&gt; these, turning them back into flat lists of elements? As usual, we do not need to fear, because the standard library has got us covered.&lt;/p&gt;

&lt;p&gt;We can call the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flatten.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatten&lt;/code&gt;&lt;/a&gt; function on a collection of collections. As you may suspect, the result is a single list of all the elements that were originally contained inside of our nested collections:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🌱&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🚀&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;💡&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🐧&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;⚙️&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🤖&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;📚&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;windowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🐧, 💡, 🚀, 🌱, 🤖, ⚙️, 🐧, 💡, 📚, 🤖, ⚙️, 📚]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is also a good point to talk about the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;&lt;/a&gt; function. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; is like a combination of first using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;, and then using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatten&lt;/code&gt; – It takes a lambda which generates a &lt;em&gt;collection&lt;/em&gt; from each of the elements in our input collection:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lettersInNames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Lou&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cyn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lettersInNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [L, o, u, M, e, l, C, y, n]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, the function that we provide creates a &lt;em&gt;list&lt;/em&gt; for each element in our input collection, containing the letters of the original string. Next, that collection of collections gets flattened. As desired, we end up with a plain list of elements – the list of characters from the names of the original collection.&lt;/p&gt;

&lt;p&gt;If you are doing an operation on a list, which in turn generates a collection for each one of the input elements, consider if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatMap&lt;/code&gt; can help you simplify your code!&lt;/p&gt;

&lt;h2 id=&quot;combining-collections-zip-and-unzip&quot;&gt;Combining collections: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So far, we have always looked at a single collection, and what we can do with it. Let’s learn about a way to combine two collections, and create a new one from them – it’s time to &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;the-zip-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;Assume we have two collections, where the elements at each index are somehow related. For example, this could be a list of cities in Germany, and we have another list of German license plates that correspond to those cities:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;germanCities&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Aachen&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Bielefeld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;München&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;germanLicensePlates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;AC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;BI&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;M&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanCities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanLicensePlates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [(Aachen, AC), (Bielefeld, BI), (München, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, by zipping these two collections, we get a &lt;em&gt;list of pairs&lt;/em&gt;, where each pair contains the elements with the same index from the original two collections.&lt;/p&gt;

&lt;p&gt;Metaphorically, this is similar to a zipper on a jacket, where the teeth match up one by one. We zip together the elements of our collection, and we get pairs of each city and its corresponding license plate.&lt;/p&gt;

&lt;p&gt;For an extra bit of flair, we can also call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; function using infix notation:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanCities&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;germanLicensePlates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [(Aachen, AC), (Bielefeld, BI), (München, M)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; can also take a transformation function. We can pass a lambda that receives the values of the individual zipped pairs, and we can apply a transformation:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanCities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanLicensePlates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [(AACHEN, ac), (BIELEFELD, bi), (MÜNCHEN, m)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-unzip-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;The standard library also contains the inverse function, called &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/unzip.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip&lt;/code&gt;&lt;/a&gt;, which takes a list of pairs, and splits them back into a pair of two separate lists:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;citiesToPlates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;germanCities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;germanLicensePlates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;uppercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lowercase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;cities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;plates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;citiesToPlates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unzip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [AACHEN, BIELEFELD, MÜNCHEN]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [ac, bi, m]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The example above uses a destructuring declaration to easily access both of them.&lt;/p&gt;

&lt;h3 id=&quot;the-zipwithnext-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipWithNext&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;In a way, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipWithNext&lt;/code&gt; is really a specialized case of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windowed&lt;/code&gt; function we got to know today: Instead instead of zipping together two separate lists element by element, this function takes one collection, and zips each of its items with the one that follows it:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipWithNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [(3, 1), (1, 4), (4, 1), (1, 5), (5, 9), (9, 2), (2, 6), (6, 5), (5, 4)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we’re zipping together a list of numbers. If we want to check the “change” – how much the value increments or decrements each step – we can express this quite elegantly using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zipWithNext&lt;/code&gt;. We provide a lambda that receives a pair of one number and the one that follows immediately after:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;changes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zipWithNext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [-2, 3, -3, 4, 4, -7, 4, -1, -1]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;custom-aggregations-reduce-and-fold&quot;&gt;Custom aggregations: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We have finally arrived at the &lt;em&gt;grand finale&lt;/em&gt; for this post – functions that help us build custom aggregations.&lt;/p&gt;

&lt;h3 id=&quot;the-reduce-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;Let’s set the scene with a small callback – in the &lt;a href=&quot;/2021/03/29/Diving-into-Kotlin-collections.html&quot;&gt;previous post&lt;/a&gt;, we learned about functions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;average&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;, and functions to receive the minimum and maximum elements inside a collection. All of these &lt;em&gt;reduce&lt;/em&gt; our collection to a single value.&lt;/p&gt;

&lt;p&gt;It’s possible that we find ourselves in a situation where there’s no out-of-the-box function for how we want to generate a single value for our collection. For example, we may want to multiply all numbers in a list, instead of summing them.&lt;/p&gt;

&lt;p&gt;In this case, we can rely on the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/a&gt; function as a more generic version for aggregating a collection:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;multiplicativeAggregate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiplicativeAggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 129600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As seen in the example above, we call the reduce function with a lambda block which receives two parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An accumulator, which has the same type as our collection, and&lt;/li&gt;
  &lt;li&gt;An individual item from our collection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The task of the lambda function is to &lt;em&gt;return a new accumulator&lt;/em&gt;. Each invocation, one after the other, receives not only the &lt;em&gt;current element&lt;/em&gt;, but also the &lt;em&gt;result of the previous calculation&lt;/em&gt;, inside the accumulator.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The function starts with the first element of our collection in the accumulator.&lt;/li&gt;
  &lt;li&gt;Then it runs our operation – in this example, we multiply the accumulator (which right now is the first number) with the current element (which is the second number).&lt;/li&gt;
  &lt;li&gt;We’ve calculated a new value, which will be stored in the accumulator, and used when our function is called once more with the third element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle repeats, and we continue to gradually build up the final result in our accumulator. One might even say we’re &lt;em&gt;accumulating&lt;/em&gt; that result!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stdlibsafari4/ri4o64h51mzhg2cwe4g2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once we’ve gone through all the elements in our collection, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; returns the final value that’s inside the accumulator.&lt;/p&gt;

&lt;p&gt;As you can see, with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, we can hide a lot of mechanics for aggregating our collection behind one function call, and stay true to Kotlin’s concise nature.&lt;/p&gt;

&lt;h3 id=&quot;the-fold-function&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; function&lt;/h3&gt;

&lt;p&gt;But we can actually go beyond this, and can take this versatility one step further – with the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;&lt;/a&gt; operation. Remember – when we used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;, the iteration starts with the first element of our input collection in the accumulator.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; function, we get to specify our own accumulator – and in fact, it can even have a different type than the items in our input collection! As an example, we can take a list of words, and multiply the number of their characters together using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cherry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;orange&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;multiplied&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiplied&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The underlying mechanism is the same – the lambda passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; function gets called with an accumulator and a value, and calculates a new accumulator. The difference is that we specify the initial value of the accumulator ourselves.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Note that we pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; as an initial value for our accumulator, and not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;. That’s because for multiplication, 1 is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_element&quot;&gt;neutral element&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; come in a number of other flavors, as well:&lt;/p&gt;

&lt;p&gt;– the sibling functions &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceRight&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-right.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldRight&lt;/code&gt;&lt;/a&gt; change the order of iteration&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-or-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduceOrNull&lt;/code&gt;&lt;/a&gt; allows you to work with empty collections without throwing exceptions.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-fold.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runningFold&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-reduce.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runningReduce&lt;/code&gt;&lt;/a&gt; don’t just return a single value representing the final state of the accumulator, but instead return a list of all the intermediate accumulator values as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h2&gt;

&lt;p&gt;This concludes my overview of some advanced collection operations in Kotlin – I hope you found this post useful, and have learned something new!&lt;/p&gt;

&lt;p&gt;Maybe you can find a point in your code where a predicate, some zipping, chunking or windowing could come in handy! Or maybe you want to explore by defining your own aggregations functions based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;Take care!&lt;/p&gt;</content><author><name></name></author><category term="kotlin," /><category term="programming," /><category term="android," /><category term="productivity" /><summary type="html">This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!</summary></entry><entry><title type="html">Tips &amp;amp; tricks for building a game using Compose for Desktop (Part 2/2)</title><link href="http://localhost:4000/2021/05/06/Tips-and-Tricks-Building-A-Game-in-Compose-for-Desktop.html" rel="alternate" type="text/html" title="Tips &amp;amp; tricks for building a game using Compose for Desktop (Part 2/2)" /><published>2021-05-06T00:00:00+02:00</published><updated>2021-05-06T00:00:00+02:00</updated><id>http://localhost:4000/2021/05/06/Tips-and-Tricks-Building-A-Game-in-Compose-for-Desktop</id><content type="html" xml:base="http://localhost:4000/2021/05/06/Tips-and-Tricks-Building-A-Game-in-Compose-for-Desktop.html">&lt;p&gt;In the &lt;strong&gt;first part of my blog post series&lt;/strong&gt; about building a small clone of the classic arcade game &lt;a href=&quot;https://en.wikipedia.org/wiki/Asteroids_(video_game)&quot;&gt;&lt;strong&gt;Asteroids&lt;/strong&gt;&lt;/a&gt; on top of Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Rendering details&lt;/strong&gt; – making sure game objects don’t escape our play area, and using a device-independent coordinate system for rendering&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Geometry and linear algebra&lt;/strong&gt; – the &lt;em&gt;secret sauce&lt;/em&gt; that makes the space ships fly&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Frame-independent movement&lt;/strong&gt; – so that our game works consistently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s learn about these topics!&lt;/p&gt;

&lt;h2 id=&quot;rendering-clipping-and-coordinate-systems&quot;&gt;Rendering: Clipping and Coordinate Systems&lt;/h2&gt;
&lt;p&gt;In the context of rendering, there are two areas that still need our attention – we need to make sure that our &lt;strong&gt;game objects are constrained to the game surface&lt;/strong&gt;, and we need to make a conscious decision about the &lt;strong&gt;units of the coordinates&lt;/strong&gt; we use to describe the position of a game object. We’ll discuss both in this section.&lt;/p&gt;

&lt;h3 id=&quot;clipping&quot;&gt;Clipping&lt;/h3&gt;

&lt;p&gt;By default, Compose naively draws your objects without any clipping. This means game objects can poke outside the “play surface”, which produces a weirdly fourth-wall-breaking effect:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/asteroids-cfd2/1xh0d39znpo8w97djsab.png&quot; alt=&quot;game objects escaping the bounds of reality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We &lt;strong&gt;constrain the game objects to the bounds&lt;/strong&gt; of our play surface by applying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modifier.clipToBounds()&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt; which defines our play surface:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fillMaxWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fillMaxHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clipToBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because all our game elements are drawn as children of this play area &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt;, using this modifier causes the rendered entities inside it to be cut off at the edges (instead of being drawn over the surrounding user interface):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/asteroids-cfd2/0zvlctk9ajr379k1m4rv.png&quot; alt=&quot;game objects staying snugly inside the play area&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;device-independent-pixels-and-density&quot;&gt;Device-Independent Pixels and Density&lt;/h3&gt;

&lt;p&gt;Something else to be aware of when doing any kind of rendering tasks in Compose for Desktop is to &lt;strong&gt;keep the units of measurement in the back of your mind&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wherever I worked with coordinates, I decided to work in &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/compose/ui/unit/Dp&quot;&gt;&lt;strong&gt;device-independent pixels&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;mouse pointer position&lt;/strong&gt; is stored as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DpOffset&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Game width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; are stored as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dp&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Game objects&lt;/strong&gt; are placed on the play surface using their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dp&lt;/code&gt; coordinates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This helps the game work consistently across high-density displays and low-density displays alike. However, it also &lt;strong&gt;requires some operations to be performed in the context of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Density&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pointerMoveFilter&lt;/code&gt; returns an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Offset&lt;/code&gt; in pixels – and &lt;strong&gt;they are not device-independent&lt;/strong&gt;!. To work around this, we obtain the local screen density in our composition:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;density&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDensity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with(density)&lt;/code&gt; to access the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toDp()&lt;/code&gt; extension functions to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Offset&lt;/code&gt; into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DpOffset&lt;/code&gt;, allowing us to store our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;targetLocation&lt;/code&gt; in this device-independent pixel format:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pointerMoveFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onMove&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;density&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetLocation&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DpOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For storing the play area’s width and height, we do a very similar thing, just without wrapping it in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DpOffset&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;onSizeChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;density&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;a-game-of-geometry-and-linear-algebra-&quot;&gt;A Game of Geometry and Linear Algebra &lt;a name=&quot;geometry&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Underneath the visualization, the “Asteroids” game builds on just a few basic blocks to implement its mechanics – it is really a game of vectors and linear algebra:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;strong&gt;position&lt;/strong&gt;, &lt;strong&gt;movement&lt;/strong&gt;, and &lt;strong&gt;acceleration&lt;/strong&gt; of the ship can be described by &lt;em&gt;position, movement, and acceleration vectors&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;orientation&lt;/strong&gt; of the ship is the &lt;em&gt;angle&lt;/em&gt; of the &lt;em&gt;vector&lt;/em&gt; between the ship and the cursor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circle-circle collisions&lt;/strong&gt; can be tested based on &lt;em&gt;distance vectors&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of reinventing the &lt;del&gt;wheel&lt;/del&gt; vector, I decided to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openrndr-math&lt;/code&gt;, which includes an implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector2&lt;/code&gt; class including all common operations, like scalar multiplication, addition, subtraction, the dot product, and more. (Ever since listening to the &lt;a href=&quot;https://talkingkotlin.com/openrndr-with-edwin-jakobs/&quot;&gt;Talking Kotlin&lt;/a&gt; episode, I’ve been meaning to explore &lt;a href=&quot;https://openrndr.org/&quot;&gt;OPENRNDR&lt;/a&gt; in detail, but that will have to happen in a separate project.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://api.openrndr.org/openrndr-math/openrndr-math/org.openrndr.math/-vector2/index.html&quot;&gt;&lt;img src=&quot;/assets/asteroids-cfd2/4t373i87ll0hb6e6zsvn.png&quot; alt=&quot;OPENRNDR Vector2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As somebody who happens to be a bit rusty with their linear algebra skills, I extended the functionality of the class a bit. For example, I defined the following extension function to allow me to access the angle a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector2&lt;/code&gt; in degrees between 0-360:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;rawAngle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawAngle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thankfully, I did not have to spend too much time on figuring out the call to &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.math/atan2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;atan2&lt;/code&gt;&lt;/a&gt;, because I previously watched one of &lt;a href=&quot;http://twitter.com/intelligibabble&quot;&gt;Leland Richardson&lt;/a&gt;’s &lt;a href=&quot;https://www.youtube.com/watch?v=fwn7olJOc70&quot;&gt;live streams&lt;/a&gt; where he also uses this function to calculate some angles.&lt;/p&gt;

&lt;p&gt;Extensions like this one help me express ideas in ways I understand them myself – and hopefully still will a few months down the road.&lt;/p&gt;

&lt;p&gt;I also made use of properties with &lt;a href=&quot;https://kotlinlang.org/docs/properties.html#getters-and-setters&quot;&gt;backing fields&lt;/a&gt; to make it possible to access a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt;’s movement vector in different representations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As a combination of &lt;strong&gt;length&lt;/strong&gt; (speed) and &lt;strong&gt;angle&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;As a vector with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the context of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt;, that can look like the following, for example:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;movementVector&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UNIT_X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we’re using this functionality outside of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; class a lot, we could also consider defining additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angle&lt;/code&gt; getters and setters as extension properties on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector2&lt;/code&gt; class, directly.&lt;/p&gt;

&lt;p&gt;For our simulation, we still need to do a bit more – we haven’t yet addressed the problem of how to update location and speed based on the elapsed real time. Let’s talk about the approach for that next.&lt;/p&gt;

&lt;h2 id=&quot;frame-independent-movement-with-delta-timing-&quot;&gt;Frame-Independent Movement With Delta Timing &lt;a name=&quot;movement&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When building game logic, we need to keep one essential point in mind: &lt;strong&gt;Not all frames are created equal!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On a 60 Hz display, each frame is visible for 16ms.&lt;/li&gt;
  &lt;li&gt;On a 120 Hz display, that number drops to 8.3ms.&lt;/li&gt;
  &lt;li&gt;On a 240 Hz display, each frame only shows for 4.2ms.&lt;/li&gt;
  &lt;li&gt;On a system under load, or while running in a non-focused window, the application frame rate may be lower than 60 Hz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That means that &lt;strong&gt;we can’t use “frames” as a measurement of time&lt;/strong&gt;: If we define the speed of our spaceship in relation to the frame rate, it would move four times faster on a 240 Hz display than on a 60 Hz display.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/asteroids-cfd2/vo8s3j8b4v0zx8b3eozn.png&quot; alt=&quot;frame-based&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to &lt;strong&gt;decouple the game logic&lt;/strong&gt; (and its rudimentary “physics simulation”) &lt;strong&gt;from the frame rate&lt;/strong&gt; at which our application runs. Even &lt;a href=&quot;https://youtu.be/qpC43CdvjyA?t=25&quot;&gt;AAA games&lt;/a&gt; don’t get this right all the time – but for our projects, we can do better!&lt;/p&gt;

&lt;p&gt;A straightforward approach for this decoupling is to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Delta_timing&quot;&gt;&lt;strong&gt;delta timing&lt;/strong&gt;&lt;/a&gt;: We calculate the new game state based on the &lt;em&gt;time difference&lt;/em&gt; (the &lt;em&gt;delta&lt;/em&gt;) since the last time we updated the game. 
This usually means we &lt;em&gt;multiply&lt;/em&gt; the result of our calculations with the time delta, &lt;em&gt;scaling&lt;/em&gt; the result based on the elapsed time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/asteroids-cfd2/3dnr7776bas1ly70yjvr.png&quot; alt=&quot;time-based&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In Compose for Desktop, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameMillis&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameNanos&lt;/code&gt;. Both of them provide a timestamp, so we just need to keep track of the previous timestamp to calculate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delta&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;prevTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prevTime&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case, a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function that takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;realDelta: Float&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;velocity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movementVector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As demonstrated in the code above, I use it to scale the velocity of game objects.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h2&gt;

&lt;p&gt;This concludes our tour of building a small game with Compose for Desktop! To see how all the pieces fit together, read the source code (~300 lines of code) on &lt;a href=&quot;https://github.com/SebastianAigner/asteroids-compose-for-desktop&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Building Asteroids on Compose for Desktop was great fun! I am always surprised by the iteration speed that &lt;a href=&quot;https://www.jetbrains.com/lp/compose/&quot;&gt;Compose for Desktop&lt;/a&gt; provides: &lt;strong&gt;Getting from a first rectangle to a full game in just one long evening.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, implementing a retro game like Asteroids on modern hardware comes with the luxury of not having to think too hard about performance optimizations, allocations, entity-component systems, or more. When building something more ambitious, these points likely need addressing, and you might find yourself using a few additional libraries besides a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vector2&lt;/code&gt; implementation.&lt;/p&gt;

&lt;p&gt;For the next &lt;a href=&quot;https://en.wikipedia.org/wiki/Super_Hexagon&quot;&gt;Super Hexagon&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Roguelike&quot;&gt;pixel roguelike&lt;/a&gt;, or other 2D game, however, you can definitely &lt;strong&gt;give Compose a shot&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once again, you can find all 300 lines of source code for this project on &lt;a href=&quot;https://github.com/SebastianAigner/asteroids-compose-for-desktop&quot;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re looking for additional inspiration, take a look at some other &lt;strong&gt;folks building games with Compose&lt;/strong&gt;!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vivek Sharma built &lt;a href=&quot;https://twitter.com/V9vek/status/1350156513625534464&quot;&gt;everybody’s favorite dinosaur game&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;vitaviva built &lt;a href=&quot;https://twitter.com/vitaviva2/status/1379876842560122886&quot;&gt;Tetris with Compose&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;John O’Reilly made a &lt;a href=&quot;https://github.com/joreilly/chip-8&quot;&gt;Compose for Desktop CHIP-8 frontend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;theapache64 pushes the limits of Compose’s builtin components to implement &lt;a href=&quot;https://twitter.com/theapache64/status/1379735815023030279&quot;&gt;Switch, Check, and Radio Snake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="gamedev," /><category term="kotlin," /><category term="jetpackcompose," /><category term="android" /><summary type="html">In the first part of my blog post series about building a small clone of the classic arcade game Asteroids on top of Compose for Desktop, we saw how to implement the main game loop, as well as manage state and draw basic shapes. In this post, we will explore some more details of the game implementation. This includes:</summary></entry><entry><title type="html">How I built an “Asteroids” game using Compose for Desktop (Part 1/2)</title><link href="http://localhost:4000/2021/05/06/Asteroids-in-Compose-for-Desktop.html" rel="alternate" type="text/html" title="How I built an “Asteroids” game using Compose for Desktop (Part 1/2)" /><published>2021-05-06T00:00:00+02:00</published><updated>2021-05-06T00:00:00+02:00</updated><id>http://localhost:4000/2021/05/06/Asteroids-in-Compose-for-Desktop</id><content type="html" xml:base="http://localhost:4000/2021/05/06/Asteroids-in-Compose-for-Desktop.html">&lt;p&gt;A while ago, I &lt;a href=&quot;https://twitter.com/sebi_io/status/1382668779377762305&quot;&gt;tweeted&lt;/a&gt; about a small game I had created on top of &lt;a href=&quot;https://www.jetbrains.com/lp/compose/&quot;&gt;&lt;strong&gt;Compose for Desktop&lt;/strong&gt;&lt;/a&gt;: A small clone of the &lt;strong&gt;classic arcade game&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Asteroids_(video_game)&quot;&gt;&lt;strong&gt;Asteroids&lt;/strong&gt;&lt;/a&gt;, in which you control a space ship with your mouse, and navigate the vastness of space, avoiding and breaking asteroids in the process.&lt;/p&gt;

&lt;video controls=&quot;&quot; src=&quot;/assets/asteroids-cfd/tweet.mp4&quot;&gt;&lt;/video&gt;

&lt;p&gt;Today, it’s time to take a look under the hood and understand how I built a basic version of this game, and how &lt;strong&gt;Compose for Desktop helped me achieve it in just one evening&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We will take a look at parts and structures in the code that I find the most interesting. To see how it all fits together, I suggest exploring the &lt;a href=&quot;https://github.com/SebastianAigner/asteroids-compose-for-desktop&quot;&gt;&lt;strong&gt;whole code on GitHub&lt;/strong&gt;&lt;/a&gt;. The whole implementation is &lt;strong&gt;only 300 lines of code&lt;/strong&gt;, which I hope makes studying and understanding it easy.&lt;/p&gt;

&lt;h3 id=&quot;the-game&quot;&gt;The Game&lt;/h3&gt;

&lt;p&gt;If you’re not caught up on your 80s arcade trivia, &lt;a href=&quot;https://en.wikipedia.org/wiki/Asteroids_(video_game)&quot;&gt;Asteroids&lt;/a&gt; was a  popular arcade game where you try to steer your space ship through space, avoiding and destroying asteroids with your ship.&lt;/p&gt;

&lt;p&gt;Because of the limitations of the hardware at the time, the game is quite simplistic in appearance: a triangular spaceship moves across a plain background and avoids simple displays of asteroids on a 2D surface.&lt;/p&gt;

&lt;p&gt;What makes this a challenge is the &lt;em&gt;interia&lt;/em&gt;: Just like a real space ship, your spaceship moves along its course in a straight line at constant speed, and you need to make corrective maneuvers by turning your ship and directing your thrust.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asteroids has achieved cult status in the arcade game scene.&lt;/strong&gt; Because of that, I wanted to see what it would take to recreate this experience using Compose for Desktop!&lt;/p&gt;

&lt;h3 id=&quot;the-building-blocks&quot;&gt;The Building Blocks&lt;/h3&gt;

&lt;p&gt;I have roughly divided the project into a few building blocks that make up the project, and that we will talk about. Namely, those are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-game-loop&quot;&gt;&lt;strong&gt;The Game Loop&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#state&quot;&gt;&lt;strong&gt;Game State Management&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rendering&quot;&gt;&lt;strong&gt;Rendering to the Screen&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the &lt;strong&gt;second part&lt;/strong&gt; of this series on building a game with Compose for Desktop, we will also look at additional &lt;strong&gt;rendering details&lt;/strong&gt;, the &lt;strong&gt;geometry and linear algebra&lt;/strong&gt; behind the game, and &lt;strong&gt;frame-independent movement&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s dive right in!&lt;/p&gt;

&lt;h2 id=&quot;the-game-loop-&quot;&gt;The Game Loop &lt;a name=&quot;the-game-loop&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;At the center of most games stands the &lt;strong&gt;game loop&lt;/strong&gt;. It acts as the &lt;strong&gt;entry point&lt;/strong&gt; that calls the game logic code. This is a fundamental difference between implementing typical declarative user interfaces and building games:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Declarative UI&lt;/strong&gt; is usually mostly static, and reacts to user actions (clicking, dragging) or other events (new data, computation progress…)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Games&lt;/strong&gt; run their logic many times per second, simulating the game world and its entities one frame at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is not to say that these two approaches are incompatible! All we need to run a main “game loop” is to get our &lt;strong&gt;function to execute&lt;/strong&gt; once per frame. In Compose, we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrame&lt;/code&gt; family of functions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameMillis&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameNanos&lt;/code&gt;), which can help us achieve exactly that.&lt;/p&gt;

&lt;p&gt;Let’s assume we already have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;game&lt;/code&gt; object – we will talk about state management shortly. We can then create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LaunchedEffect&lt;/code&gt; which asks Compose for Desktop to &lt;strong&gt;call our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function whenever a new frame is rendered&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;LaunchedEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;withFrameNanos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameNanos&lt;/code&gt; is a suspending method. Its exact implementation is described in the &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#withframemillis&quot;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withFrameNanos&lt;/code&gt; suspends until a new frame is requested, immediately invokes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onFrame&lt;/code&gt; with the frame time in nanoseconds in the calling context of frame dispatch, then resumes with the result from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onFrame&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The frame time, which it provides us with, will also come in handy, as we will see in the second part of this blog post series, when we talk about &lt;em&gt;frame-independent movement&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;game-state-management-&quot;&gt;Game State Management &lt;a name=&quot;state&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Compose is excellent at managing state&lt;/strong&gt;, and when building a game like Asteroids, we can use the same mechanisms to keep track of the data attached to game objects or the current play session, to name just two examples.&lt;/p&gt;

&lt;p&gt;As suggested in the previous section, my Asteroids game has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; class, an instance of which is wrapped in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remember&lt;/code&gt; call in the main composition.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remember&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It acts as a container for all game-related data. For example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Game object information (in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutableStateListOf&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;The current game phase (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUNNING&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STOPPED&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;The size of the playing field (based on window dimensions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Game&lt;/code&gt; object, we treat the state data as mutable, and make any state changes as we see fit.&lt;/p&gt;

&lt;h3 id=&quot;game-objects&quot;&gt;Game Objects&lt;/h3&gt;

&lt;p&gt;Individual game objects once again group the state belonging to an individual game entity: a spaceship, an asteroid, or a bullet, and provide methods to modify their state, spawn new game objects, or check their relation to other game objects.&lt;/p&gt;

&lt;p&gt;In my implementation of Asteroids, all game objects share a lot of behavior, from the way they move through the environment to how they check their collision – we’ll talk about the geometry and linear algebra that goes into that a bit later.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; class provides implementations for these shared behaviors:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;angle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mutableStateOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;movementVector&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realDelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;velocity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movementVector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;velocity&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;overlapsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;distanceTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShipData&lt;/code&gt; class inherits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;speed&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;position&lt;/code&gt; and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; method from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt;, but defines its own size, angle, and a function to fire a bullet:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShipData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;40.0&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;visualAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ship&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BulletData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;speed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visualAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShipData&lt;/code&gt; (or even a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; in general) does not include any logic on how to render this item to the display – &lt;strong&gt;with Compose, keeping state and presentation separated is quite easy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Because a lot of behavior is shared between all types of entities in the game, our main game loop can treat them as the supertype &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; for the most part, and only specific interactions between certain types of objects, like bullet-asteroid or asteroid-player collisions, need to be handled specifically.&lt;/p&gt;

&lt;h2 id=&quot;rendering-to-the-screen-&quot;&gt;Rendering to the Screen &lt;a name=&quot;rendering&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I found that in Compose, &lt;strong&gt;separating game data from the visual representation comes quite naturally&lt;/strong&gt;. Game objects like a ship, an asteroid, or a bullet are all represented in two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A class holding the state associated with the game object (in terms of “Compose state” – via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutableStateOf&lt;/code&gt; and friends) – We briefly talked about this in the previous section.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Composable&lt;/code&gt;, defining the rendering based on the game object’s data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To illustrate the latter, here’s the minimal visual representation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asteroid&lt;/code&gt; composable. It receives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asteroidData&lt;/code&gt;, which is the container for all information regarding the state of this particular game object:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Asteroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AsteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;asteroidSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroidSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asteroidData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CircleShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;102&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;153&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code snippet is enough to &lt;strong&gt;describe the whole visual representation&lt;/strong&gt; of an asteroid.&lt;/p&gt;

&lt;p&gt;We start with a &lt;a href=&quot;https://developer.android.com/jetpack/compose/layout&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt;&lt;/a&gt; – one of Compose’s most basic layout primitives, which allows us to have entities overlap (which is useful since we manually take care of placing the individual entities). We then use Compose’s &lt;a href=&quot;https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Modifier&lt;/code&gt;s&lt;/a&gt; to specify the position of the asteroid in the form of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offset&lt;/code&gt;, its size, rotation angle, shape (by clipping a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CircleShape&lt;/code&gt;), and background color.&lt;/p&gt;

&lt;p&gt;Note that Compose offers quite &lt;strong&gt;high-level APIs even for these basic shapes&lt;/strong&gt; – for example, we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.rotate&lt;/code&gt; directly, without having to manually do geometry work to figure out how to get our entities facing the right way.&lt;/p&gt;

&lt;p&gt;To keep this snippet as concise as possible, I’ve also introduced some extension functions on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameObject&lt;/code&gt; that make it possible to reuse the logic of computing the offset of a game object based on its position and size, called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xOffset&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yOffset&lt;/code&gt;, which I’ve snuck into the previous code snippet already. Their implementation is relatively straightforward:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A slightly more complicated composable would be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ship&lt;/code&gt; component, which combines the shapes of a triangle and circle to create a minimalistic spaceship:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Composable&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ship&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ShipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;shipSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dp&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shipData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visualAngle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CircleShape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Modifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fillMaxSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onDraw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;drawPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shipSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toPx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Top-left corner...&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...to right-center...&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ... to bottom-left corner.&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt; defining the ship is quite similar to the one we saw for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Asteroid&lt;/code&gt;, but we additionally add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; to draw some additional shapes on top of our spaceship – in this case, a triangle path. In typical Compose fashion, we just add this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; in the lambda block following our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt;, meaning the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Canvas&lt;/code&gt; will inhert the coordinate system of its parent, including its offset and rotation.&lt;/p&gt;

&lt;p&gt;These composables are then just rendered to a &lt;em&gt;play surface&lt;/em&gt; – nothing more than a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Box&lt;/code&gt; with a locked aspect ratio of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0f&lt;/code&gt; (to keep it quadratic). Of course, applying some artistic talent to these visual representations of the game is also possible, but we’re keeping it minimal for now.&lt;/p&gt;

&lt;h2 id=&quot;continued-in-part-2&quot;&gt;Continued in Part 2&lt;/h2&gt;
&lt;p&gt;There’s still a bit more work to do until we can call our game done. In part 2 of this blog post series, we will look at additional rendering details, the geometry and linear algebra behind the game’s simple physics simulation, as well as frame-independent movement.&lt;/p&gt;</content><author><name></name></author><category term="gamedev," /><category term="kotlin," /><category term="jetpackcompose," /><category term="android" /><summary type="html">A while ago, I tweeted about a small game I had created on top of Compose for Desktop: A small clone of the classic arcade game Asteroids, in which you control a space ship with your mouse, and navigate the vastness of space, avoiding and breaking asteroids in the process.</summary></entry><entry><title type="html">Diving into Kotlin collections</title><link href="http://localhost:4000/2021/03/29/Diving-into-Kotlin-collections.html" rel="alternate" type="text/html" title="Diving into Kotlin collections" /><published>2021-03-29T00:00:00+02:00</published><updated>2021-03-29T00:00:00+02:00</updated><id>http://localhost:4000/2021/03/29/Diving-into-Kotlin-collections</id><content type="html" xml:base="http://localhost:4000/2021/03/29/Diving-into-Kotlin-collections.html">&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href=&quot;https://kotl.in/video&quot;&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/F8jj7e-_jFA?si=S6T19DAGNXhz-CyM&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/collections-overview.html&quot;&gt;Kotlin Collections&lt;/a&gt;! You’ve heard of them, you’ve used them – so it makes sense to learn even more about them! Kotlin’s standard library provides &lt;strong&gt;awesome tools to manage groups of items&lt;/strong&gt;, and we’re going to take a closer look!&lt;/p&gt;

&lt;p&gt;Let’s see &lt;strong&gt;what types of collections&lt;/strong&gt; the Kotlin standard library offers, and explore a &lt;strong&gt;common subset of operations&lt;/strong&gt; that’s available for all of the collections you get in the standard library. Let’s get started.&lt;/p&gt;

&lt;p&gt;In the Kotlin standard library, we have three big types of collections: &lt;strong&gt;Lists&lt;/strong&gt;, &lt;strong&gt;Sets&lt;/strong&gt;, and &lt;strong&gt;Maps&lt;/strong&gt;. Just like many other parts of the standard library, these &lt;strong&gt;collections are available anywhere you can write Kotlin&lt;/strong&gt;: on the JVM, but also in Kotlin/Native, Kotlin/JS, and common Kotlin code.&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;Let’s start with the &lt;strong&gt;most popular candidate&lt;/strong&gt; of a collection in Kotlin: a &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt;&lt;/a&gt;. To rehearse:&lt;/p&gt;

&lt;p&gt;A list is a collection of &lt;strong&gt;ordered elements&lt;/strong&gt;. That means that you can access the elements of a list using &lt;strong&gt;indices&lt;/strong&gt; – so you can say “give me the element at position two”. There’s also &lt;strong&gt;no constraints on duplicate elements&lt;/strong&gt; in our list. We can just put in whatever elements we’d like. So, very few constraints on content, and maximum versatility in how we access the elements!&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;aList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Cherry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;aList&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [Apple, Banana, Cherry, Apple]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;aList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Banana&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;p&gt;Next up, we have the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;&lt;/a&gt;! Sets are groups of objects where we don’t care about the order of elements. Instead, we want to make sure that our collection &lt;strong&gt;never contains any duplicates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s the key property of a set: all of its &lt;strong&gt;contents are unique&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That makes sets a bit more of a specialized data structure, but there’s a good chance you want to use them in everyday scenarios anyway.&lt;/p&gt;

&lt;p&gt;What are &lt;strong&gt;typical things&lt;/strong&gt; you might want to store in a set? Tags, for example. Or, maybe you’re building a social network, and you want to store the IDs of all the friends that a certain user has. In both cases, you don’t want to have duplicates in these collections, and probably don’t care about the order.&lt;/p&gt;

&lt;p&gt;A set can help you &lt;strong&gt;enforce these constraints&lt;/strong&gt; without having to really think about it, and &lt;strong&gt;without manual duplication checks&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;emotions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Happy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Curious&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Joyful&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Happy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// even if we try to add duplicates...&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Joyful&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...to our set...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emotions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...the elements in our set stay unique!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Happy, Curious, Joyful]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sets are actually also a &lt;strong&gt;common mathematical abstraction&lt;/strong&gt;. Typical mathematical concepts, like &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/union.html&quot;&gt;unions&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/intersect.html&quot;&gt;intersections&lt;/a&gt;, or the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/subtract.html&quot;&gt;set difference&lt;/a&gt; also translate neatly into Kotlin code.&lt;/p&gt;

&lt;h2 id=&quot;maps&quot;&gt;Maps&lt;/h2&gt;

&lt;p&gt;Last, but certainly not least, we have &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt;&lt;/a&gt;. A map is a &lt;strong&gt;set of key-value pairs&lt;/strong&gt;, where &lt;strong&gt;each key is unique&lt;/strong&gt;. It’s also sometimes called a “dictionary” for that reason. You encounter maps whenever you’re &lt;strong&gt;associating data&lt;/strong&gt; – storing a persons name and their favorite pizza topping, or associating a license plate with vehicle information.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;peopleToPizzaToppings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mapOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;Ken&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Pineapple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;Lou&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Peperoni&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;Ash&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ketchup&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleToPizzaToppings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// {Ken=Pineapple, Lou=Peperoni, Ash=Ketchup}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toppings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ash&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Ketchup&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Key-value pairs are everywhere, and just like in many other languages, maps are the go-to way to manage them in Kotlin.&lt;/p&gt;

&lt;h2 id=&quot;collections-can-be-mutable&quot;&gt;Collections can be mutable&lt;/h2&gt;

&lt;p&gt;By default, these collections in Kotlin are &lt;strong&gt;read-only&lt;/strong&gt;. This is in the spirit of &lt;strong&gt;immutability&lt;/strong&gt; which accompanies typical functional paradigms – instead of changing the contents of a collection, you create a new collection with the changes applied, which you can then &lt;strong&gt;safely pass around&lt;/strong&gt; in your application, ensuring that the &lt;strong&gt;original collection stays unchanged&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stdlib-collections/3avccfflc4ugw7l0xykt.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we also have &lt;strong&gt;mutable flavors&lt;/strong&gt; of all of the collections in Kotlin: we have &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableList&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableSet&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableMap&lt;/code&gt;&lt;/a&gt;. Those are modifiable, meaning you can &lt;strong&gt;comfortably add and remove elements&lt;/strong&gt;. With data where you’re inherently expecting change, you’d probably use these mutable variants.&lt;/p&gt;

&lt;h2 id=&quot;collections-are-iterable&quot;&gt;Collections are iterable&lt;/h2&gt;

&lt;p&gt;Kotlin collections being &lt;em&gt;iterable&lt;/em&gt; means that the standard library provides a &lt;strong&gt;common, standardized set of typical operations for collections&lt;/strong&gt;, for example, to retrieve their size, check if they contain a certain item, and more.&lt;/p&gt;

&lt;p&gt;Lists and sets directly implement the Collection interface, which in turn implements the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterable/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;&lt;/a&gt; interface. Maps have an &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/iterator.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iterator()&lt;/code&gt;&lt;/a&gt; operator function, and provide iterable properties, like their set of keys, their list of values, as well as the entries of the map, so key-value pairs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stdlib-collections/h7j7a868lyz9dowlwnrn.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s learn about some &lt;strong&gt;shared functionality of iterables&lt;/strong&gt;. The following examples are going to use a list, but really, we can just assume that we’re just working with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&lt;/code&gt; here – the concrete implementation does not matter. Also, all the functions discussed &lt;strong&gt;leave the original collection unchanged&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;looping-over-collections&quot;&gt;Looping over collections&lt;/h2&gt;

&lt;p&gt;A core function of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;, as its name suggests, is that it provides a mechanism to &lt;strong&gt;access the elements&lt;/strong&gt; that our collection contains, one after the other – to iterate it.&lt;/p&gt;

&lt;p&gt;The easiest way to go through all the elements in a collection is the basic Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/control-flow.html#for-loops&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;&lt;/a&gt; loop. When we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt; loop with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iterable&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;in&lt;/code&gt; operator cleverly understands that we want to &lt;strong&gt;go over the iterator&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Cherry&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Apple&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Banana&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a &lt;strong&gt;more functional style&lt;/strong&gt;, we can also write this same snippet using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/for-each.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt;&lt;/a&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Apple&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Banana&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; takes every element from our collection, and &lt;strong&gt;calls a function&lt;/strong&gt; (which we provide) with the element as its argument.&lt;/p&gt;

&lt;h2 id=&quot;transforming-collections-map&quot;&gt;Transforming collections: map&lt;/h2&gt;

&lt;p&gt;Let’s continue with a classic when it comes to &lt;strong&gt;transforming collections&lt;/strong&gt;: the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;&lt;/a&gt; function! (Don’t be confused! The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function has nothing to do with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Map&lt;/code&gt; collection type. You can treat them as two completely different things.)&lt;/p&gt;

&lt;p&gt;Just like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forEach&lt;/code&gt; function, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function is of &lt;a href=&quot;https://kotlinlang.org/docs/lambdas.html&quot;&gt;higher order&lt;/a&gt;. So, it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Takes each element&lt;/strong&gt; from our collection,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;applies a function&lt;/strong&gt; to it, and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;creates another collection&lt;/strong&gt;, containing the return values of those function applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The result of the map function doesn’t have to be the same type as the one of our input collection, either.&lt;/p&gt;

&lt;p&gt;This makes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function &lt;strong&gt;very versatile&lt;/strong&gt; – whether you want to parse a collection of strings into a collection of integers, or resolve a list of user names to a list of full user profiles –– if you’re &lt;strong&gt;transforming one collection into another&lt;/strong&gt;, it’s probably a good &lt;strong&gt;first instinct&lt;/strong&gt; to think &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;fruits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Cherry&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stiurf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, you might have a transformation inside your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function where you &lt;strong&gt;can’t generate valid results&lt;/strong&gt; for all input elements. In this case, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapNotNull&lt;/code&gt;&lt;/a&gt; function, and our resulting collection will only contain those function results that &lt;strong&gt;evaluated to an actual value&lt;/strong&gt;. This also ensures that type of our resulting variable is &lt;strong&gt;non-nullable&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;strs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;V&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapNotNull&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toIntOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [1, 2, 4] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we need to &lt;strong&gt;keep track of the index&lt;/strong&gt; of the element which we’re currently transforming, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-indexed.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mapIndexed&lt;/code&gt;&lt;/a&gt; function. It’s quite similar in how it works, but in this case, we get &lt;strong&gt;two parameters in our transformation function&lt;/strong&gt;: the &lt;em&gt;index&lt;/em&gt; and the &lt;em&gt;value&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;rank&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Gold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Silver&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;Bronze&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ranking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapIndexed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;$m ($idx)&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[Gold (0), Silver (1), Bronze (2)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;filtering-collections-filter-and-partition&quot;&gt;Filtering collections: filter and partition&lt;/h2&gt;

&lt;p&gt;If we have a collection, but we’re only interested in &lt;strong&gt;elements that fulfil a certain condition&lt;/strong&gt;, the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt;&lt;/a&gt; function comes to the rescue!&lt;/p&gt;

&lt;p&gt;Just like the previous examples, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; accepts &lt;strong&gt;another function as its parameter&lt;/strong&gt;. This time, instead of defining a transformation, we’re defining what you can call a &lt;strong&gt;predicate&lt;/strong&gt; here.&lt;/p&gt;

&lt;p&gt;A predicate is a function that takes a collection element and &lt;strong&gt;returns a boolean value&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; means that the given element matches the predicate, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; means the opposite. So this predicate acts as the “&lt;strong&gt;doorman&lt;/strong&gt;” – if the value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, the collection item is let through to the result collection, otherwise, it is discarded.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cyborg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Joe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Agatha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Amber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Cyborg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Rob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;discoVisitors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discoVisitors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Agatha, Amber, Rob]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re testing a &lt;strong&gt;negative condition&lt;/strong&gt;, you can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterNot&lt;/code&gt;&lt;/a&gt; function instead, which behaves identically, but &lt;strong&gt;inverts the condition&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filterNot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Joe]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterNot&lt;/code&gt; &lt;strong&gt;discard elements&lt;/strong&gt; where the condition doesn’t match. But maybe we don’t want to discard the “other half” of elements, and instead we want to put those into a separate list. This is where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partition&lt;/code&gt; function comes into play.&lt;/p&gt;

&lt;p&gt;By using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partition&lt;/code&gt;, we &lt;strong&gt;combine the powers&lt;/strong&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterNot&lt;/code&gt;. It returns a &lt;strong&gt;pair of lists&lt;/strong&gt;, where the first list contains all the elements for which the predicate holds true, and the second contains all the elements that fail the test. So, in our doorman analogy, instead of sending people who fail the check away, we just send them to a different place. (Using parentheses, we can &lt;strong&gt;destructure&lt;/strong&gt; this pair of lists directly into two independent variables.)&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Agatha, Amber, Rob]&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Joe]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re bringing a &lt;strong&gt;collection of nullable items&lt;/strong&gt; to the party, you can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterNotNull&lt;/code&gt;&lt;/a&gt; function which, as you may have guessed, &lt;strong&gt;automatically discards any elements that are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;&lt;/strong&gt;, and gives you a new collection with an adjusted, non-nullable type accordingly.&lt;/p&gt;

&lt;p&gt;Speaking of adjusting types – if your collection contains multiple elements from a type hierarchy, but you’re only interested in &lt;strong&gt;elements of a specific type&lt;/strong&gt;, you can use &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-is-instance.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filterIsInstance&lt;/code&gt;&lt;/a&gt;, and specify the desired type as a generic parameter.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Joe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Agatha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Amber&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Cyborg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Rob&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;actualPeople&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filterNotNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualPeople&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Joe, Agatha, Amber, Rob]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cyborgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterIsInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cyborg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cyborgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [Rob]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;retrieve-collection-parts-take-and-drop&quot;&gt;Retrieve collection parts: take and drop&lt;/h2&gt;

&lt;p&gt;Filtering allowed us to apply a predicate function, and create a new collection containing items that match. But what about the even simpler cases? Sometimes, we just want to &lt;strong&gt;grab a few elements&lt;/strong&gt; from our collection.&lt;/p&gt;

&lt;p&gt;For that, we have the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt;&lt;/a&gt; functions. You might already be able to guess what they do. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take&lt;/code&gt; gives you a &lt;strong&gt;collection of the first n elements&lt;/strong&gt; from your original collection. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take(2)&lt;/code&gt; is going to give you the first two elements. On the opposite hand, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop(3)&lt;/code&gt; is going to &lt;strong&gt;leave out the first three elements&lt;/strong&gt; of your original collection, and only gives you everything that follows after those three elements. And you don’t have to be afraid to “overdrop” either – dropping more elements from a collection than it contains just gives you an empty list:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;🌱&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🚀&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;💡&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;🐧&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;⚙️&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;seedlingAndRocket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seedlingAndRocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🌱, 🚀]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;penguinAndGear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;penguinAndGear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🐧, ⚙️]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nothing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nothing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// []&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remember, the original collection is not modified!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// [🌱, 🚀, 💡, 🐧, ⚙️]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One huge benefit of the functions we’ve seen so far is their &lt;strong&gt;composability&lt;/strong&gt;: Because mapping, filtering, taking, dropping, and all their friends return a new collection, it’s easy to just take that result, and &lt;strong&gt;immediately use it as an argument for the next collection function&lt;/strong&gt;, turning collection into collection into collection.&lt;/p&gt;

&lt;p&gt;However, we should keep in mind that chaining a number of these functions together means we generate a bunch of &lt;strong&gt;intermediate collections&lt;/strong&gt;. Now, this isn’t going to set your computer on fire immediately, but it is still something to be aware of, especially when you work with very large collections. For this case, Kotlin has a few aces up its sleeve as well, called &lt;a href=&quot;https://kotlinlang.org/docs/sequences.html&quot;&gt;sequences&lt;/a&gt;, but we will dive into those at a later point.&lt;/p&gt;

&lt;h2 id=&quot;aggregating-collections-sums-averages-minimums-maximums-and-counting&quot;&gt;Aggregating collections: sums, averages, minimums, maximums, and counting&lt;/h2&gt;

&lt;p&gt;Once we’re done transforming our data, we might want to get a &lt;strong&gt;single result value&lt;/strong&gt; out of it. If we have a collection of &lt;strong&gt;numerical values&lt;/strong&gt; like integers or doubles, we get some nice functions called &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/average.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;average&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sum.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum&lt;/code&gt;&lt;/a&gt; out of the box, which help us calculate those values.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;randomNumbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;average&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 4.09090909090909091&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 45&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In some situations (…or, we might say, &lt;em&gt;sum&lt;/em&gt; situations…), we have a collection of more &lt;strong&gt;complex objects&lt;/strong&gt;, and want to still &lt;strong&gt;add them up&lt;/strong&gt; somehow, based on their properties. Of course, we could first use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; function to obtain a collection containing only numbers – but by using the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sum-of.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sumOf&lt;/code&gt;&lt;/a&gt; function, we can do all of this in a single function call: we can pass a function that acts as a &lt;strong&gt;selector&lt;/strong&gt; (so a function that gives us whatever number we want to associate with the element) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sumOf&lt;/code&gt; will use the &lt;strong&gt;result of that selector function&lt;/strong&gt; to &lt;strong&gt;add up&lt;/strong&gt; all our elements.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;randomNames&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Dallas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Kane&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ripley&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Lambert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;cumulativeLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sumOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cumulativeLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we’re only interested in the &lt;strong&gt;greatest or smallest value&lt;/strong&gt; contained in our collection of numbers, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-or-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxOrNull&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-or-null.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minOrNull&lt;/code&gt;&lt;/a&gt; functions.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 9&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maxOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And just like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sumBy&lt;/code&gt;, we have the sibling functions &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-of.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxOf&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-of.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minOf&lt;/code&gt;&lt;/a&gt;, where we once again pass a &lt;strong&gt;selector function&lt;/strong&gt;, which is going to be used to &lt;strong&gt;determine the maximum or minimum&lt;/strong&gt; of a collection.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;longestName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;maxOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longestName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 7&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;shortestName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minOf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shortestName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we just care about the &lt;strong&gt;number of elements&lt;/strong&gt; contained in our collection, we can use the &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count&lt;/code&gt;&lt;/a&gt; function – either without any parameters, to just get the number of all elements, or using a &lt;strong&gt;predicate&lt;/strong&gt;. So that’s like filtering the collection first, and then counting the elements. But again, all wrapped into one.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val digits = randomNumbers.count()

println(digits)
// 11

val bigDigits = randomNumbers.count { it &amp;gt; 5 }

println(bigDigits)
// 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also the powerful &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to-string.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joinToString&lt;/code&gt;&lt;/a&gt; function, which allows us to &lt;strong&gt;turn all elements of our collection into a string&lt;/strong&gt;, complete with a metric ton of customization options like separators, prefixes and postfixes, limits or a placeholder if you have more elements than what your specified limit allows. And even &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joinToString&lt;/code&gt; accepts a &lt;strong&gt;transformation function&lt;/strong&gt;, once again, so you don’t need to do some kind of separate mapping beforehand, it’s all built in. Truly powerful stuff to create a string from a collection.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randomNumbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joinToString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pi://&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;[$it]&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// pi://[3]-[1]-[4]-[1]-[5]-...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it – have a nice Kotlin!&lt;/p&gt;</content><author><name></name></author><category term="kotlin,programming,android,productivity" /><summary type="html">This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!</summary></entry><entry><title type="html">Migrating our Kotlin/JS app to the new IR compiler</title><link href="http://localhost:4000/2021/03/09/Migrating-our-KotlinJS-app-to-the-new-IR-compiler.html" rel="alternate" type="text/html" title="Migrating our Kotlin/JS app to the new IR compiler" /><published>2021-03-09T00:00:00+01:00</published><updated>2021-03-09T00:00:00+01:00</updated><id>http://localhost:4000/2021/03/09/Migrating-our-KotlinJS-app-to-the-new-IR-compiler</id><content type="html" xml:base="http://localhost:4000/2021/03/09/Migrating-our-KotlinJS-app-to-the-new-IR-compiler.html">&lt;p&gt;Together with some colleagues, I maintain a small &lt;strong&gt;full-stack web application&lt;/strong&gt; called CodeQuiz, which we built during a &lt;a href=&quot;https://blog.jetbrains.com/blog/2019/11/22/jetbrains-7th-annual-hackathon/&quot;&gt;48-hour hackathon at JetBrains&lt;/a&gt;, and use at &lt;a href=&quot;https://www.youtube.com/watch?v=_AM5VbPTKeg&quot;&gt;events&lt;/a&gt; to gamify learning about Kotlin. I recently &lt;strong&gt;migrated its frontend&lt;/strong&gt; which you can see below (and which is using the &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers/tree/master/kotlin-react&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt; wrappers&lt;/a&gt;) to the &lt;strong&gt;new Kotlin/JS IR compiler backend&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/migrating-kotlin-js-ir/7bteuocjmnzyj2fi3ovm.gif&quot; alt=&quot;CodeQuiz in action&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new compiler made a bunch of issues in our code visible, so I wanted to &lt;strong&gt;share my experience&lt;/strong&gt; of migrating a Kotlin/JS app, and provide some &lt;strong&gt;hints&lt;/strong&gt; on where to look when your app behaves unexpectedly after moving to the IR compiler.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-kotlinjs-ir-compiler&quot;&gt;What’s the Kotlin/JS IR compiler?&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://kotlinlang.org/docs/js-ir-compiler.html&quot;&gt;Kotlin/JS IR compiler&lt;/a&gt; is currently in development (with alpha stability) and on its way to become &lt;strong&gt;the new default&lt;/strong&gt; way of compiling Kotlin to JavaScript. It’s a completely re-engineered infrastructure for all things Kotlin/JS. This switch comes with a &lt;strong&gt;number of benefits&lt;/strong&gt; for Kotlin/JS applications!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/migrating-kotlin-js-ir/jsirtweet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using it allows you to already &lt;strong&gt;test drive&lt;/strong&gt; a bunch of &lt;strong&gt;new features&lt;/strong&gt;, including &lt;a href=&quot;https://kotlinlang.org/docs/js-ir-compiler.html#preview-generation-of-typescript-declaration-files-d-ts&quot;&gt;&lt;strong&gt;TypeScript declaration generation&lt;/strong&gt;&lt;/a&gt;, and profit from &lt;strong&gt;new optimizations&lt;/strong&gt; like stronger DCE (and, as a result, &lt;strong&gt;smaller generated artifacts&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;But it also means that you have to embrace its &lt;strong&gt;more strict rules&lt;/strong&gt; regarding &lt;strong&gt;interoperation&lt;/strong&gt; between Kotlin and JavaScript. This might &lt;strong&gt;require some adjustment&lt;/strong&gt; at first, but will help write more predictable code that interoperates between Kotlin and JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;why-doesnt-my-code-just-work-&quot;&gt;Why doesn’t my code &lt;em&gt;just work&lt;/em&gt;? 😱&lt;/h2&gt;
&lt;p&gt;Especially with code at the “boundary” between Kotlin and JavaScript, &lt;strong&gt;the legacy compiler was quite lenient&lt;/strong&gt; – for example how it exported all symbols (e.g. a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt;) from Kotlin code to the JavaScript world.&lt;/p&gt;

&lt;p&gt;Unfortunately, this means that it was easy to rely on compiler-specific internal behavior – &lt;strong&gt;some things just &lt;em&gt;happened&lt;/em&gt; to work, even though the compiler gave no guarantees that these things &lt;em&gt;were supposed to work&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When using the IR compiler these &lt;strong&gt;mistakes become visible&lt;/strong&gt; – it enforces &lt;strong&gt;proper, explicit interoperation&lt;/strong&gt; between the world of Kotlin and the world of JavaScript (we call this the &lt;strong&gt;“Closed World” model&lt;/strong&gt;). This stricter and more explicit control will help the compiler &lt;strong&gt;optimize your code&lt;/strong&gt; more aggressively.&lt;/p&gt;

&lt;p&gt;But, due to the nature of JavaScript being a dynamic runtime environment, some of these changes in behavior only appear &lt;strong&gt;during execution time&lt;/strong&gt;. In the case of CodeQuiz, a number of modifications were necessary to get everything working. We’ll look at them in detail in the next sections.&lt;/p&gt;

&lt;p&gt;Ultimately, it boiled down to &lt;strong&gt;running and testing&lt;/strong&gt; the application (both in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;development&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;production&lt;/code&gt; mode), and keeping an eye on the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Helping Kotlin’s DCE via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JsExport&lt;/code&gt; (e.g. React components)&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt; to define React properties (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt;) and state (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt;) (instead of (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;es) and other areas of interoperation&lt;/li&gt;
  &lt;li&gt;Creating plain JavaScript objects for interaction with external components&lt;/li&gt;
  &lt;li&gt;Fixing npm dependencies that use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export default&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Making sure our Kotlin dependencies support Kotlin/JS IR&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;turning-on-ir&quot;&gt;Turning on IR&lt;/h2&gt;

&lt;p&gt;To use the IR compiler for our project, we make a small change to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle(.kts)&lt;/code&gt; file. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin&lt;/code&gt; configuration block, change &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js(IR)&lt;/code&gt;, and enable the generation of JavaScript artifacts via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binaries.executable()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;binaries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;executable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;commonWebpackConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cssSupport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;testTask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;useKarma&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;useChromeHeadless&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Alternatively, the compiler type can also be set in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gradle.properties&lt;/code&gt; file, with the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin.js.compiler=ir&lt;/code&gt;, which might be easier if you have a more complex project.)&lt;/p&gt;

&lt;p&gt;We can now cross our fingers and execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;browserDevelopmentRun&lt;/code&gt; Gradle task to &lt;strong&gt;start our application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at some of &lt;strong&gt;the symptoms&lt;/strong&gt; our CodeQuiz app exhibited when first running the application with IR, and let’s &lt;strong&gt;correct the related code&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;make-js--and-react-related-classes-external-interfaces&quot;&gt;Make JS- and React-related classes external interfaces&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://kotlinlang.org/docs/js-interop.html#declare-static-members-of-a-class&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt; modifier&lt;/a&gt; helps Kotlin understand that a certain &lt;strong&gt;declaration is pure JavaScript&lt;/strong&gt;. This prevents problems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt;s that would arise from the &lt;strong&gt;false assumption&lt;/strong&gt; that something is a Kotlin object (like a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt;) – even though in reality, we are dealing with a plain JavaScript object.&lt;/p&gt;

&lt;p&gt;When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-kotlin&lt;/code&gt;, this can often be observed regarding definitions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; – with React, &lt;strong&gt;state and properties are pure JavaScript objects&lt;/strong&gt; managed by the framework for us.&lt;/p&gt;

&lt;h3 id=&quot;turn-rstate-into-an-external-interface&quot;&gt;Turn RState into an external interface&lt;/h3&gt;

&lt;p&gt;When running my application with IR enabled for the first time, I got the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClassCastException&lt;/code&gt; in regards to some React components’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19131&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;ClassCastException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ClassCastException&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ClassCastException↵    at THROW_CCE (webpack-inter…s/react-dom/cjs/react-dom.development.js:4056:31)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;cause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ClassCastException&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ClassCastException↵    at THROW_CCE (webpack-internal:///./kotlin/codequiz-server.js:19101:11)↵    at App.init (webpack-internal:///./kotlin/codequiz-server.js:101164:69)↵    at RComponent_init_$Init$ (webpack-internal:///./kotlin/codequiz-server.js:31545:11)↵    at new App (webpack-internal:///./kotlin/codequiz-server.js:101148:5)↵    at constructClassInstance (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:12716:18)↵    at updateClassComponent (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:17425:5)↵    at beginWork (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:19073:16)↵    at HTMLUnknownElement.callCallback (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:3945:14)↵    at Object.invokeGuardedCallbackDev (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:3994:16)↵    at invokeGuardedCallback (webpack-internal:///../../node_modules/react-dom/cjs/react-dom.development.js:4056:31)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RuntimeException&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;THROW_CCE&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19131&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;	&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101224&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The stack trace suggests the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;init&lt;/code&gt; method of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App&lt;/code&gt; component. Since here, only application state is initialized, it was quite easy to pinpoint the underlying problem.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;offending code&lt;/strong&gt; for the application state looks like this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lastMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isConnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;chosenName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code &lt;em&gt;happened&lt;/em&gt; to work with the legacy compiler, but the IR compiler marks our problem: if our interface &lt;strong&gt;describes the exact shape of a &lt;em&gt;JavaScript object&lt;/em&gt;&lt;/strong&gt;, we need to &lt;strong&gt;mark the interface as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The refactored code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;I made sure that all interfaces implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt; in my application were annotated with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt; by using a &lt;a href=&quot;https://www.jetbrains.com/help/idea/structural-search-and-replace.html&quot;&gt;&lt;strong&gt;structural search and replace&lt;/strong&gt;&lt;/a&gt;. If you’re using IntelliJ IDEA 2021.1, you can copy an &lt;a href=&quot;https://gist.github.com/SebastianAigner/62119536f24597e630acfdbd14001b98&quot;&gt;SSR template I prepared&lt;/a&gt; into your clipboard. To use it, open SSR via File&lt;/td&gt;
      &lt;td&gt;Find&lt;/td&gt;
      &lt;td&gt;Find Structurally [or Replace Structurally], click on the wrench icon, and select “Import Template from Clipboard”. You can then click “Find” and “Replace All” to annotate all interfaces properly.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;turn-rprops-into-an-external-interface&quot;&gt;Turn RProps into an external interface&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt; isn’t the only type that is affected by this change – similar problems appear when React properties (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt;) aren’t marked as external:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100446&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$this$attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_set_presenterStartGameHandler_&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_no_name_provided__346&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invoke_547&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100446&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101430&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RElementBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attrs_0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;codequiz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Analogously, this results from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; definition being just a Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LobbyProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isPresenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;presenterStartGameHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;playerLoginHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;playerList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PlayerList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isDisabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The IR-approved versions of this code uses an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LobbyProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once again, this change can just be repeated for all components defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; interfaces in the Kotlin/JS application. This is easily automated via &lt;strong&gt;structural search and replace&lt;/strong&gt;, as described in the previous section. &lt;a href=&quot;https://gist.github.com/SebastianAigner/a47a77f5e519fc74185c077ba12624f9&quot;&gt;Here is a template&lt;/a&gt; for auto-annotating your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt; – instructions for using SSR can be found in the previous section.&lt;/p&gt;

&lt;h3 id=&quot;use-external-interfaces-over-data-classes&quot;&gt;Use external interfaces over data classes!&lt;/h3&gt;

&lt;p&gt;If you’ve been using Kotlin’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data class&lt;/code&gt; to create your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt;s, you will need to do a similar refactoring. Code like this is invalid when using Kotlin/JS IR:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;data class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomComponentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, use the following, refactored version.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomComponentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;address-limitations-of-external-interfaces&quot;&gt;Address limitations of external interfaces&lt;/h3&gt;
&lt;p&gt;Compared to a Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;, there are a few &lt;strong&gt;limitations&lt;/strong&gt; when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to &lt;strong&gt;instantiate the interface from Kotlin code&lt;/strong&gt;, you will have to mark your properties as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; will not work here). Also, certain Kotlin-specific constructs, such as &lt;strong&gt;function types with receivers, are prohibited&lt;/strong&gt; in external declarations.&lt;/p&gt;

&lt;p&gt;In our codebase, the latter showed up as a &lt;strong&gt;compile error&lt;/strong&gt; in an interface called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ButtonProps&lt;/code&gt;. Here, we define a property &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inside&lt;/code&gt; which takes an extension function on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StyledDOMBuilder&lt;/code&gt; type to define any components that should be rendered in the button:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ButtonProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StyledDOMBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BUTTON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since these functions with receivers are just &lt;strong&gt;syntactic sugar&lt;/strong&gt; for a function with an (implicitly named) parameter of the same type, we can refactor the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt; and pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StyledDOMBuilder&lt;/code&gt; explicitly, resolving this problem:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StyledDOMBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BUTTON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As luck would have it, our &lt;strong&gt;callsite&lt;/strong&gt; was already structured so that this slightly changed style of function definition just works, so no change was needed there:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;styledButton&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-plain-js-objects-for-interoperability&quot;&gt;Create plain JS objects for interoperability&lt;/h2&gt;

&lt;p&gt;Inside the definition of a React component, objects implementing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RState&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RProps&lt;/code&gt; &lt;strong&gt;already exist&lt;/strong&gt;, and we simply &lt;strong&gt;modify their properties&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;When we &lt;strong&gt;create these objects&lt;/strong&gt; ourselves, we (currently still) need to be a bit careful. In CodeQuiz, we had the following problem passing values to an external &lt;a href=&quot;https://www.npmjs.com/package/react-minimal-pie-chart&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-minimal-pie-chart&lt;/code&gt;&lt;/a&gt; component:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statistics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapIndexed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerCounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PiePoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number $index&quot;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerCounts&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toTypedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…and that even though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PiePoint&lt;/code&gt; is correctly specified as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt;. The specific issue here turned out to be a bit finicky:&lt;/p&gt;

&lt;p&gt;As of now, properties on a Kotlin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt; implementing an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt; are &lt;strong&gt;&lt;em&gt;accessible&lt;/em&gt;&lt;/strong&gt; from JavaScript, but, for example, they are &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-31876&quot;&gt;&lt;strong&gt;not &lt;em&gt;enumberable&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-minimal-pie-chart&lt;/code&gt; internally uses &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object.assign&lt;/code&gt;&lt;/a&gt; to copy around some of the data we pass as props. &lt;strong&gt;It loses our non-enumerable properties&lt;/strong&gt; in the process, which leads to some unexpected &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined&lt;/code&gt;s at runtime.&lt;/p&gt;

&lt;p&gt;Until this problem is resolved (see the &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-17683&quot;&gt;corresponding YouTrack issue&lt;/a&gt;), the safe route right now is to &lt;strong&gt;generate plain JavaScript objects&lt;/strong&gt; ourselves.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin-wrappers&lt;/code&gt; actually include a &lt;strong&gt;helper function&lt;/strong&gt; called &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers/blob/master/kotlin-extensions/src/main/kotlin/kotlinext/js/Helpers.kt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsObject&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; which is useful for creating such objects. The same snippet using these plain JavaScript objects looks like this:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statistics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapIndexed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerCounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;jsObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PiePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Number $index&quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answerCounts&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toTypedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since in a plain JavaScript object, all properties are enumerable, our charting library now works properly.&lt;/p&gt;

&lt;h2 id=&quot;help-the-dce-via-jsexport&quot;&gt;Help the DCE via @JsExport!&lt;/h2&gt;

&lt;p&gt;Dead Code Elimination (DCE) is the part of the Kotlin/JS IR compiler that helps &lt;strong&gt;keep your compiled production artifacts small&lt;/strong&gt;. It’s responsible for analyzing the Kotlin code for any pieces of code that aren’t being used anywhere, and subsequently deleting them.&lt;/p&gt;

&lt;p&gt;When packaging our application for production (which is when DCE is executed, e.g. via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;browserProductionRun&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jsBrowserDistribution&lt;/code&gt;), this can present a &lt;strong&gt;problem&lt;/strong&gt; for our &lt;strong&gt;React components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evaluation&lt;/code&gt; class from our project:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EvaluationProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EvaluationProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The only way this class is ever referenced via its &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KClass&lt;/code&gt;&lt;/a&gt;, when we tell React to render this component:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Evaluation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As of now, the IR DCE tries to be a bit too clever for its own good. &lt;strong&gt;It removes the contents of our class&lt;/strong&gt; practically entirely (from its perspective, none of it, besides the type itself, is being used after all!). This causes the (unfortunately quite cryptic) error &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TypeError: r.render is not a function&lt;/code&gt; (or something similar).&lt;/p&gt;

&lt;p&gt;To turn this error message into something a bit more actionable, we can (temporarily!) &lt;strong&gt;enable webpack’s development mode&lt;/strong&gt; in our Gradle build file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle(.kts)&lt;/code&gt;), which turns off the name minification:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;commonWebpackConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jetbrains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;KotlinWebpackConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DEVELOPMENT&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now, we need to make sure our component doesn’t get removed, we can &lt;strong&gt;mark the class&lt;/strong&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JsExport&lt;/code&gt;. Then, DCE will not touch it:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@JsExport&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Evaluation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EvaluationProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EvaluationProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(As a small sidenote: declarations marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external&lt;/code&gt;, such as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt;, are always treated as reachable by DCE, and don’t need this treatment. &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers/blob/master/kotlin-react/README.md#creating-a-react-function-component-with-kotlin&quot;&gt;Functional components&lt;/a&gt; are also not affected, because their usage site doesn’t refer to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;::class&lt;/code&gt;, but to the variable holding the component directly.)&lt;/p&gt;

&lt;p&gt;In the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin-react&lt;/code&gt;, there are still &lt;strong&gt;some rough edges&lt;/strong&gt;, like the warning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exported declaration uses non-exportable super type: RComponent&lt;/code&gt;. Together with making this kind of “workaround” obsolete, these are topics that still need addressing before the IR compiler becomes the default choice.&lt;/p&gt;

&lt;p&gt;You can find a Structural Search and Replace template for this change &lt;a href=&quot;https://gist.github.com/SebastianAigner/b06f50b1448f6466775b0df14fb2b35f&quot;&gt;right here&lt;/a&gt;. Find instructions on how to apply this automated replacement to your project in one of the previous paragraphs.&lt;/p&gt;

&lt;p&gt;This is definitely one of the trickier issues to find, because it &lt;strong&gt;only manifests in production artifacts&lt;/strong&gt; (when DCE is actually executed). For this reason, it’s important to &lt;strong&gt;test your production artifacts&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;fixing-dependencies-on-default-exports&quot;&gt;Fixing dependencies on default exports&lt;/h2&gt;

&lt;p&gt;Our app uses a few external React components which we get from npm, including &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-minimal-pie-chart&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Module&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;failed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Unexpected&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;processed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cjs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;You&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;may&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;need&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;additional&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;these&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$module$react_dom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createGlobalStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$module$styled_components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createGlobalStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$module$react_minimal_pie_chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$module$react_player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We wrote the following external declaration for the component provided by this package, which worked for our used version, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5.0.2&lt;/code&gt;, beforehand, but not with IR:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-minimal-pie-chart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JsNonModule&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PieChartProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JsName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PieChartProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, we actually hit &lt;strong&gt;a bug in the IR compiler&lt;/strong&gt;! It currently does not treat &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#description&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt;&lt;/a&gt; as a reserved identifier. This causes a conflict when the library uses this identifier for its exports:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chart&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./Chart&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-41650&quot;&gt;An issue&lt;/a&gt; exists to turn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; into a reserved identifier, and this point will hopefully be addressed soon. Until then, the &lt;strong&gt;workaround&lt;/strong&gt; is to wrap the definition in an external object, like so:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PieChartProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RProps&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JsModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;react-minimal-pie-chart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@JsNonModule&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;external&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PieChart&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PieChartProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the usage site for the component, we now use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PieChart.default&lt;/code&gt; value instead of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PieChart&lt;/code&gt; value previously:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// . . .&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fix-library-code&quot;&gt;Fix library code&lt;/h2&gt;
&lt;p&gt;After fixing all of the other problems, I noticed a special case where the app would throw the following error:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Uncaught&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`props.dangerouslySetInnerHTML`&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`{__html: ...}`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//reactjs.org/link/dangerously-set-inner-html for more information.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It took me a while to find the culprit, but I remembered that there was a place where we explicitly allowed HTML-formatted rich text in our application, and are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unsafe&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;unsafe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answerText&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It turns out that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kotlin-wrappers&lt;/code&gt; actually &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers/pull/416&quot;&gt;&lt;strong&gt;contained a small mistake&lt;/strong&gt;&lt;/a&gt; in its own interoperation code: it used a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; instead of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;external interface&lt;/code&gt; for their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InnerHTML&lt;/code&gt; object – which is used to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attrs.unsafe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was a great point to &lt;strong&gt;make a small open-source contribution&lt;/strong&gt; in the form of a pull request (and get the code improved further just &lt;a href=&quot;https://github.com/JetBrains/kotlin-wrappers/pull/418&quot;&gt;hours later&lt;/a&gt;)!&lt;/p&gt;

&lt;h2 id=&quot;petition-library-authors-to-support-ir&quot;&gt;Petition library authors to support IR&lt;/h2&gt;

&lt;p&gt;Luckily, all the libraries we are using in the project (including &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor Clients&lt;/a&gt; and &lt;a href=&quot;https://github.com/Kotlin/kotlinx.serialization&quot;&gt;kotlinx.serialization&lt;/a&gt;) already support the Kotlin/JS IR compiler, and they provide artifacts that work with both backends. And there is a number of other libraries that already offer artifacts compatible with the IR compiler, like &lt;a href=&quot;https://www.fritz2.dev/&quot;&gt;fritz2&lt;/a&gt;, &lt;a href=&quot;https://github.com/korlibs/korge&quot;&gt;KorGE&lt;/a&gt;, &lt;a href=&quot;https://github.com/Kodein-Framework/Kodein-DI&quot;&gt;Kodein-DI&lt;/a&gt;, and more.&lt;/p&gt;

&lt;p&gt;If you’re using a Kotlin/JS library that currently does not ship IR-compatible artifacts, it might be a good idea to &lt;strong&gt;catch the maintainer’s attention&lt;/strong&gt;, and maybe &lt;strong&gt;help out&lt;/strong&gt; yourself to ensure that your favorite libraries work well with the new compiler infrastructure. To make sure libraries can support both legacy and IR backends at the same time, there is also a mechanism for &lt;a href=&quot;https://kotlinlang.org/docs/js-ir-compiler.html#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility&quot;&gt;authoring libraries with backwards compatibility&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re a &lt;strong&gt;library author&lt;/strong&gt;, and want to learn more about supporting the Kotlin/JS IR backend, please do not hesitate to reach out on the &lt;a href=&quot;http://kotl.in/slack&quot;&gt;Kotlinlang Slack&lt;/a&gt;. You can either contact me directly, or get input from the team and community in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#javascript&lt;/code&gt; channel.&lt;/p&gt;

&lt;h2 id=&quot;closing-thoughts&quot;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;The new IR compiler introduces some changes that might require action from you – especially in places where Kotlin code meets the JavaScript platform. I hope this post helps diagnose some of these behavior changes, so that you can experience all the &lt;strong&gt;exciting stuff&lt;/strong&gt; the new compiler brings as soon as possible.&lt;/p&gt;

&lt;p&gt;If you encounter issues during your migration to the IR backend, share them with the team. We’re happy to help, and rely on your feedback to make sure we can iron out any remaining problems as soon as possible. The easiest way to do this is to log your problems in the official Kotlin &lt;a href=&quot;http://kotl.in/issue&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Give the Kotlin/JS IR compiler a try in your projects, and prepare yourself for the future!&lt;/p&gt;</content><author><name></name></author><category term="kotlin," /><category term="javascript" /><summary type="html">Together with some colleagues, I maintain a small full-stack web application called CodeQuiz, which we built during a 48-hour hackathon at JetBrains, and use at events to gamify learning about Kotlin. I recently migrated its frontend which you can see below (and which is using the kotlin-react wrappers) to the new Kotlin/JS IR compiler backend.</summary></entry><entry><title type="html">Tips and tricks for your Kotlin code explorations</title><link href="http://localhost:4000/general/2021/03/03/Tips-and-Trick-for-Kotlin-code-explorations.html" rel="alternate" type="text/html" title="Tips and tricks for your Kotlin code explorations" /><published>2021-03-03T14:33:57+01:00</published><updated>2021-03-03T14:33:57+01:00</updated><id>http://localhost:4000/general/2021/03/03/Tips-and-Trick-for-Kotlin-code-explorations</id><content type="html" xml:base="http://localhost:4000/general/2021/03/03/Tips-and-Trick-for-Kotlin-code-explorations.html">&lt;p&gt;This blog post accompanies a video from our &lt;strong&gt;YouTube series&lt;/strong&gt; which you can find on our &lt;a href=&quot;https://kotl.in/video&quot;&gt;Kotlin YouTube channel&lt;/a&gt;, or &lt;strong&gt;watch here&lt;/strong&gt; directly!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/DIHlq_Q0vKM?si=78-RRRDKnM5BRmTq&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;We’re going to take a look at some &lt;strong&gt;handy tips and tricks&lt;/strong&gt; to help you &lt;strong&gt;explore Kotlin code&lt;/strong&gt;, no matter whether it’s your own code or the code from the Kotlin standard library or any of your other dependencies. They will equip you to &lt;strong&gt;discover&lt;/strong&gt; some of the &lt;strong&gt;goodies&lt;/strong&gt; in the code you’re working with on your own.&lt;/p&gt;

&lt;p&gt;Working with Kotlin means we have some &lt;strong&gt;powerful companions&lt;/strong&gt; by our side - &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; and &lt;a href=&quot;https://developer.android.com/studio&quot;&gt;Android Studio&lt;/a&gt; - that help us in every step of the development process. Let’s get to know them a little better and &lt;strong&gt;become more productive&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;reading-and-writing-code&quot;&gt;Reading and writing code&lt;/h2&gt;

&lt;p&gt;So – how do &lt;em&gt;I&lt;/em&gt; &lt;strong&gt;read and understand&lt;/strong&gt; Kotlin code that I encounter and modify?&lt;/p&gt;

&lt;h3 id=&quot;annotating-code-with-types-and-names-inlay-hints&quot;&gt;Annotating code with types and names: Inlay hints&lt;/h3&gt;

&lt;p&gt;A big helper I rely on every day is these little grey bobbles wherever variable names or types appear, called &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/inlay-hints.html&quot;&gt;inlay hints&lt;/a&gt;&lt;/strong&gt;, and honestly, I don’t want to read code without them. They give us information about &lt;strong&gt;types&lt;/strong&gt; and &lt;strong&gt;parameter names&lt;/strong&gt;, right where that information is most useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/eRMFtzt.gif&quot; alt=&quot;Inlay hints give handy information about types and names.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We enable those in our preferences under &lt;em&gt;Editor&lt;/em&gt; &amp;gt; &lt;em&gt;Inlay Hints&lt;/em&gt; &amp;gt; &lt;em&gt;Kotlin&lt;/em&gt;. (I have all of them enabled, but toggles are available for fine-grained control.)&lt;/p&gt;

&lt;h4 id=&quot;inlay-hints-for-chained-operations&quot;&gt;Inlay hints for chained operations&lt;/h4&gt;

&lt;p&gt;These inlay hints help me a lot! For example, when I’m chaining a bunch of operations, they give me a &lt;strong&gt;quick check&lt;/strong&gt; whether I am creating the &lt;strong&gt;correct type&lt;/strong&gt; at the end:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/CBFax5F.gif&quot; alt=&quot;Adding a .toString() to the end of a call chain changes the type hint accordingly&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;inlay-hints-for-lambdas-and-dsls&quot;&gt;Inlay hints for lambdas and DSLs&lt;/h4&gt;

&lt;p&gt;Inlay hints are also awesome whenever we encounter &lt;strong&gt;lambdas&lt;/strong&gt;, especially &lt;strong&gt;&lt;a href=&quot;https://kotlinlang.org/docs/lambdas.html#function-literals-with-receiver&quot;&gt;lambdas with receivers&lt;/a&gt;&lt;/strong&gt;, because they give us information about &lt;strong&gt;variables&lt;/strong&gt; that are implicitly in scope, or which &lt;strong&gt;receiver&lt;/strong&gt; your lambda actually provides.&lt;/p&gt;

&lt;p&gt;Especially if we are working on a project that makes heavy use of &lt;a href=&quot;https://kotlinlang.org/docs/type-safe-builders.html&quot;&gt;Kotlin’s &lt;strong&gt;DSL functionality&lt;/strong&gt;&lt;/a&gt;, these hints can help &lt;strong&gt;demystify&lt;/strong&gt; some of these APIs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/ulxb1bvtabepqvj5i0dz.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;inlay-hints-for-the-kotlin-gradle-dsl&quot;&gt;Inlay hints for the Kotlin Gradle DSL&lt;/h4&gt;
&lt;p&gt;Oh, and as a little hint – if we are using the &lt;strong&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/kotlin_dsl.html&quot;&gt;Gradle Kotlin DSL&lt;/a&gt;&lt;/strong&gt; (so if our build file ends in .kts), these inlay hints also work here!&lt;/p&gt;

&lt;p&gt;For someone who tried to avoid touching Gradle for quite a while myself, I’d say that the Kotlin Gradle DSL, together with these inlay hints, have helped me &lt;strong&gt;understand&lt;/strong&gt; how the Kotlin DSL for Gradle works, what &lt;strong&gt;functionality&lt;/strong&gt; is available in what scope, and so on:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/dyxrgmedl2ycqlfi0p1e.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Try using inlay hints yourself&lt;/strong&gt;! Maybe you’ll fall in love just like I did.&lt;/p&gt;

&lt;h3 id=&quot;code-completion--space&quot;&gt;Code completion (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌃&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Space&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;In my opinion, code completion is the &lt;strong&gt;number one way&lt;/strong&gt; in IntelliJ IDEA or Android Studio to &lt;strong&gt;discover a Kotlin API&lt;/strong&gt;. We know the drill – we &lt;strong&gt;put a dot&lt;/strong&gt; behind a symbol, and &lt;strong&gt;get some suggestions&lt;/strong&gt; of what we might want to call:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/9axn4ljd2kf0vpuney0j.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But code completion &lt;strong&gt;doesn’t always pop up naturally&lt;/strong&gt;. For example, when you’re inside a lambda function. Via inlay hints, we might be able to determine that there’s an implicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this&lt;/code&gt; in scope – and we could type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;this.&lt;/code&gt; and get code completion. But there’s also a nicer (and easier) way.&lt;/p&gt;

&lt;p&gt;We just press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌃&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Space&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Space&lt;/code&gt; on Win/Linux) to manually &lt;strong&gt;invoke completion&lt;/strong&gt; based on our current scope. And &lt;strong&gt;this works&lt;/strong&gt; practically &lt;strong&gt;everywhere&lt;/strong&gt; – whether we are inside a builder block or returning to an unfinished statement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/mdaax1k4pyphnkd6jht9.png&quot; alt=&quot;Using Ctrl-Space to invoke completion.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA’s &lt;a href=&quot;https://www.jetbrains.com/help/idea/productivity-guide.html&quot;&gt;productivity guide&lt;/a&gt; tells me I’ve used the feature over 2400 times, and it’s one of the most important tools in the belt.&lt;/p&gt;

&lt;h3 id=&quot;parameter-info-type-popup--p&quot;&gt;Parameter info: Type popup (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;When we first type out a function with &lt;strong&gt;parentheses&lt;/strong&gt;, we get a little &lt;strong&gt;hint bubble&lt;/strong&gt; that tells us parameters that the function accepts. However, this popup only appears the &lt;strong&gt;first time&lt;/strong&gt; we write those parentheses – when we &lt;strong&gt;jump away&lt;/strong&gt; with our cursor and return to our function later, we might want to &lt;strong&gt;see this information again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To magically &lt;strong&gt;summon the parameter info popup&lt;/strong&gt; again, we simply press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; on Win/Linux):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/wm7kn5u7bd2jdsc1can5.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The popup also shows default parameters, overloads &amp;amp; co. As such, it can also help us &lt;strong&gt;discover new functionality&lt;/strong&gt; on already existing code – like additional parameters we might still want to add to &lt;strong&gt;adjust the behavior&lt;/strong&gt; of any functions we call.&lt;/p&gt;

&lt;h3 id=&quot;quick-documentation-f1&quot;&gt;Quick Documentation (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F1&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;If we hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F1&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Q&lt;/code&gt; on Win/Linux), IntelliJ IDEA will show us a little text blurb explaining what a method is supposed to do – some &lt;strong&gt;quick documentation&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;We can actually &lt;strong&gt;pin this window&lt;/strong&gt; to the side of our IDE via the three little dots &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⋮&lt;/code&gt; in the pop-over. From there, we can select the option “&lt;strong&gt;auto-update from source&lt;/strong&gt;,” reachable by the small cogwheel icon ⚙️. With this enabled, we always get up-to-date information on the side of our IDE about the symbol the cursor is currently over.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/9fgsnt9p2ur6whc3ao7w.png&quot; alt=&quot;Auto-updating quick documentation, right next to the code&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;navigating-through-code&quot;&gt;Navigating through code&lt;/h2&gt;

&lt;p&gt;Your IDE also empowers you when it comes to &lt;strong&gt;moving between pieces of code&lt;/strong&gt;, usages and declarations, and more. Let’s take a closer look!&lt;/p&gt;

&lt;h3 id=&quot;go-to-declaration-or-usages--click--b&quot;&gt;Go to declaration or usages (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Click&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;The shortcut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Click&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Click&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; on Win/Linux) is known by its formal title “&lt;strong&gt;Go to declaration or usages&lt;/strong&gt;”. As you may have guessed, it’s a two-way shortcut:&lt;/p&gt;

&lt;p&gt;When we &lt;strong&gt;click on the usage of a symbol&lt;/strong&gt; – a variable, a place where we’re constructing a new object, invoking a function, or implementing an interface – this shortcut will &lt;strong&gt;send us to the definition&lt;/strong&gt; of what we just clicked.&lt;/p&gt;

&lt;p&gt;And vice-versa, when we click on a &lt;strong&gt;symbol declaration&lt;/strong&gt; – so a place where we’re declaring a variable, an interface, a class, or a function, this is going to give us &lt;strong&gt;a list of all places where that symbol is being used&lt;/strong&gt; in our project.&lt;/p&gt;

&lt;p&gt;This shortcut is an easy way to &lt;strong&gt;reveal interesting information&lt;/strong&gt; about our code and the code we depend on. I find &lt;strong&gt;stepping into a library&lt;/strong&gt; especially useful:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/bVQFHWd.gif&quot; alt=&quot;Stepping into a library via shortcut.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can look at the code we’re calling, &lt;strong&gt;learn something&lt;/strong&gt; from its implementation and structure, and we can &lt;strong&gt;immerse ourselves&lt;/strong&gt; even deeper.&lt;/p&gt;

&lt;h3 id=&quot;rendered-documentation&quot;&gt;Rendered documentation&lt;/h3&gt;

&lt;p&gt;IntelliJ IDEA and Android Studio actually have something called “&lt;a href=&quot;https://www.jetbrains.com/help/idea/working-with-code-documentation.html#toggle-rendered-view&quot;&gt;Rendered documentation&lt;/a&gt;”. This makes it more comfortable to read documentation blocks in code by changing the font and making the contrast between code and documentation even stronger.&lt;/p&gt;

&lt;h3 id=&quot;structure-tool-window&quot;&gt;Structure tool window&lt;/h3&gt;

&lt;p&gt;IntelliJ and Android Studio allow us to look at our currently opened file’s structure, which helps us &lt;strong&gt;discover interesting parts quicker&lt;/strong&gt;. We can enable the structure tool window via View &amp;gt; Tool Windows &amp;gt; Structure. This pops open information about the current file, which we can use as a &lt;strong&gt;navigation helper&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/LdPinqA.gif&quot; alt=&quot;Navigating a file via the structure tool window&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;searching-and-finding&quot;&gt;Searching (and finding)&lt;/h3&gt;

&lt;p&gt;If we can’t find what we’re looking for, we can always go back to the &lt;strong&gt;text search function&lt;/strong&gt;. In IntelliJ IDEA and Android Studio, we can reach “Find in Files” via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⌘&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;⇧&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt; on Win/Linux).&lt;/p&gt;

&lt;p&gt;By default, this function only searches for text occurrences in our own code, not the code of our dependencies. However, we can set our search scope to include “Projects and Libraries” to widen where to look for text snippets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/8bdam86y8x2jfod67zc3.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;structural-search&quot;&gt;Structural search&lt;/h4&gt;

&lt;p&gt;There’s also the so-called &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/structural-search-and-replace.html&quot;&gt;structural search&lt;/a&gt;&lt;/strong&gt;, which is a bit of a specialized tool when it comes to exploring. It allows us to find &lt;strong&gt;constructs matching a specific schema&lt;/strong&gt;, for example finding functions that have exactly one parameter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/exploring-stdlib/hv4z4p86z2zlph5kyduu.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might not use this one as often. But it’s always good to have heard about the fact that it exists – you never know when that knowledge might come in handy, and then you can look into the topic a bit more deeply.&lt;/p&gt;

&lt;h2 id=&quot;go-and-explore&quot;&gt;Go and explore!&lt;/h2&gt;

&lt;p&gt;I hope you learned something new. If you have some more must-have settings, shortcuts, or whatever, feel free to &lt;strong&gt;share them with me&lt;/strong&gt;, either here, on &lt;a href=&quot;http://kotl.in/video&quot;&gt;YouTube&lt;/a&gt;, or &lt;a href=&quot;https://twitter.com/sebi_io&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are tons of other &lt;strong&gt;productivity shortcuts&lt;/strong&gt; in your Kotlin IDE. If you’re interested in more of them, check out &lt;a href=&quot;https://www.youtube.com/watch?v=QYO5_riePOQ&quot;&gt;Trisha Gee’s video&lt;/a&gt; covering the 15 IntelliJ IDEA shortcuts:&lt;/p&gt;

&lt;p&gt;Alternatively (or additionally), grab yourself a &lt;a href=&quot;https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf&quot;&gt;&lt;strong&gt;virtual keymap overview&lt;/strong&gt;&lt;/a&gt;, which has all the most-used shortcuts for the operating system of your choice!&lt;/p&gt;

&lt;p&gt;Try integrating your new knowledge when you work with Kotlin code the next time. &lt;strong&gt;Have fun exploring!&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="kotlin,productivity,programming,tools" /><summary type="html">This blog post accompanies a video from our YouTube series which you can find on our Kotlin YouTube channel, or watch here directly!</summary></entry><entry><title type="html">Hosting Kotlin/JS on GitHub Pages via GitHub Actions</title><link href="http://localhost:4000/general/2021/02/05/Hosting-Kotlin-JS-on-GitHub-Pages.html" rel="alternate" type="text/html" title="Hosting Kotlin/JS on GitHub Pages via GitHub Actions" /><published>2021-02-05T18:33:57+01:00</published><updated>2021-02-05T18:33:57+01:00</updated><id>http://localhost:4000/general/2021/02/05/Hosting-Kotlin-JS-on-GitHub-Pages</id><content type="html" xml:base="http://localhost:4000/general/2021/02/05/Hosting-Kotlin-JS-on-GitHub-Pages.html">&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is an easy way to &lt;strong&gt;host your Kotlin/JS application&lt;/strong&gt; - and in combination with the &lt;strong&gt;continuous integration&lt;/strong&gt; service &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt;, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can &lt;strong&gt;build and test your application on GitHub’s CI&lt;/strong&gt;, and get your &lt;strong&gt;Kotlin/JS web apps published for free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we are going to configure GitHub Actions and Pages so that &lt;strong&gt;new code&lt;/strong&gt; pushed to our repository or added via pull request &lt;strong&gt;is automatically validated&lt;/strong&gt; (by having the project built and our tests run on GitHub’s servers), and code pushed to the main branch of our project is automatically made &lt;strong&gt;available to the public&lt;/strong&gt; (by generating and publishing production artifacts of our app).&lt;/p&gt;

&lt;p&gt;To achieve this, we are going to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#sample-setup&quot;&gt;Set up a quick Kotlin/JS project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#github-integration&quot;&gt;Share its code on GitHub&lt;/a&gt; (via IntelliJ IDEA’s Git integration)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gh-action-setup&quot;&gt;Set up GitHub Actions’ workflow YAML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gh-pages-setup&quot;&gt;Set up GitHub pages to work with the result of our Actions workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you already know the basics, and want to skip straight to the configuration section, &lt;a href=&quot;#gh-action-setup&quot;&gt;click here&lt;/a&gt; – or &lt;a href=&quot;https://github.com/SebastianAigner/kotlin-js-on-gh-pages&quot;&gt;find the sample project directly on GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-our-sample-kotlinjs-application-&quot;&gt;Setting up our sample Kotlin/JS application &lt;a name=&quot;sample-setup&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To &lt;em&gt;deploy&lt;/em&gt; a project, we must first &lt;em&gt;have&lt;/em&gt; a project. For this demo, I will use an &lt;strong&gt;example generated via project wizard&lt;/strong&gt; – if you already have a Kotlin/JS application you would like to deploy, feel free to skip ahead and use it instead.&lt;/p&gt;

&lt;p&gt;A boilerplate Kotlin/JS project is quickly generated in &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; by navigating to File | New | Project…, selecting “Kotlin” in the sidebar, and choosing a &lt;strong&gt;project template&lt;/strong&gt; in the “Kotlin/JS” section (I’m choosing a React project). We just need to make sure that a Project JDK is selected. For everything else, the default settings are fine and don’t need to be adjusted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/1nzk5keyrms4u7bh619e.png&quot; alt=&quot;new-project-wizard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a basic project, let’s start by &lt;strong&gt;getting it on GitHub&lt;/strong&gt; - creating a repository and pushing our code.&lt;/p&gt;

&lt;h2 id=&quot;putting-our-code-on-github-&quot;&gt;Putting our code on GitHub &lt;a name=&quot;github-integration&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We could, of course, use &lt;a href=&quot;https://guides.github.com/activities/hello-world/#repository&quot;&gt;GitHub’s web interface&lt;/a&gt; to set up our repository, and wire up our local repository manually – but &lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/version-control-integration.html&quot;&gt;IntelliJ IDEA’s Version Control Integration&lt;/a&gt;&lt;/strong&gt; makes it &lt;strong&gt;even smoother&lt;/strong&gt; to move our project code into a new GitHub Repository. We simply select “&lt;strong&gt;Share Project on GitHub&lt;/strong&gt;” in the “VCS” tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/e5y09kdv0ube2dmztwq9.png&quot; alt=&quot;share project on github&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If this is your first time using this feature, IntelliJ IDEA might ask you to &lt;strong&gt;authenticate&lt;/strong&gt; using your GitHub account. You then get to specify your repository name, its visibility (private/public), and can provide a short description that will show up on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/i42fc1w8jug5l95wafiv.png&quot; alt=&quot;share proj&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once confirmed, IntelliJ IDEA will create a GitHub project for you, and show you the “Add Files For Initial Commit” window, which we can simply accept by pressing “Add”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/29g49u26awwu8ebz8ig3.png&quot; alt=&quot;initial commit including gitignore&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you might have noticed, IntelliJ IDEA makes our life a bit easier here by &lt;strong&gt;auto-generating&lt;/strong&gt; a default set of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; files, making sure that any files which shouldn’t be checked into source control (such as build artifacts or local configurations) are &lt;strong&gt;correctly ignored&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once the commit is finished, we see a small notification bubble containing a &lt;strong&gt;link to our GitHub repository&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/st0uwzx0v3qi9s66k4w6.png&quot; alt=&quot;success&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-github-actions-&quot;&gt;Setting up GitHub Actions &lt;a name=&quot;gh-action-setup&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Time to set up GitHub Actions! Actions will be responsible for &lt;strong&gt;building and testing&lt;/strong&gt; our project – turning our Kotlin source files into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; artifacts, running any unit tests we might have, and copying files into the right location for deployment on GitHub Pages (a branch called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; by convention). We configure Actions using so-called &lt;a href=&quot;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&quot;&gt;&lt;strong&gt;workflows&lt;/strong&gt;&lt;/a&gt;, which are YAML configuration files containing instructions on how to transform and build code.&lt;/p&gt;

&lt;p&gt;GitHub looks for workflows in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; directory, so let’s create this directory structure at our project’s root. Inside, let’s create a new file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-and-publish-kjs.yml&lt;/code&gt;, and add the following configuration to it:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build and Publish&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pull_request&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test and Build&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Setup Java 1.8 environment for the next steps&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup Java&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-java@v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;java-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.8&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Check out current repository&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Fetch Sources&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Build application&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Test and Build&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./gradlew build&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# If main branch update, deploy to gh-pages&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;github.ref == &apos;refs/heads/master&apos; || github.ref == &apos;refs/heads/main&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JamesIves/github-pages-deploy-action@3.7.1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;BRANCH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gh-pages&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The branch the action should deploy to.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;FOLDER&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build/distributions&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The folder the action should deploy.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;CLEAN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Automatically remove deleted files from the deploy branch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;understanding-our-action-yaml&quot;&gt;Understanding our Action YAML&lt;/h3&gt;

&lt;p&gt;We could just use this configuration as is, and move on to the next step – but it’s always good to try and understand what’s going on in our project. And while the YAML configuration reads quite naturally, I still want to quickly look at this configuration file section by section (Additionally, feel free to consult the &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions&quot;&gt;GitHub Actions documentation&lt;/a&gt; for more information):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We first give our workflow a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt; – in this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Build and Publish&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next, we define the triggers for this workflow – what events &lt;strong&gt;kick off&lt;/strong&gt; this process. Because we want to make sure that pushed code always compiles, and that pull requests are also fine, we set the value to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull_request&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Next, we define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt;, which &lt;strong&gt;groups&lt;/strong&gt; the different steps we want to run in a given environment (in our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu-latest&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Now, we define the different &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steps&lt;/code&gt; our build needs to go through:&lt;/li&gt;
  &lt;li&gt;The Kotlin compiler needs Java to be present, so we use a &lt;a href=&quot;https://github.com/actions/setup-java&quot;&gt;predefined GitHub Action&lt;/a&gt; to &lt;strong&gt;install Java &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.8&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;We use &lt;a href=&quot;https://github.com/actions/checkout&quot;&gt;another predefined Action&lt;/a&gt; to &lt;strong&gt;check out the code&lt;/strong&gt; for our project.&lt;/li&gt;
  &lt;li&gt;We run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./gradlew build&lt;/code&gt; command. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; is a &lt;strong&gt;standard lifecycle&lt;/strong&gt; task for Kotlin/JS projects which installs all dependencies from npm and Gradle, compiles the application, and runs any tests included in the project.&lt;/li&gt;
  &lt;li&gt;Lastly, we use &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;another Action&lt;/a&gt; to &lt;strong&gt;deploy our project&lt;/strong&gt; to GitHub Pages – but &lt;strong&gt;only if the workflow is running on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch&lt;/strong&gt; (we don’t want development branches to be deployed to the public!). We point this action to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build/distributions&lt;/code&gt; folder, which is where building a Kotlin/JS project creates the final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; artifacts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: This workflow &lt;strong&gt;builds and tests all commits and pull requests&lt;/strong&gt; – if the commit is on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch, the changes are prepared for &lt;strong&gt;publishing via Pages&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;committing-the-workflow-file&quot;&gt;Committing the workflow file&lt;/h3&gt;

&lt;p&gt;To enable our newly created workflow in the GitHub project, we &lt;strong&gt;commit and push&lt;/strong&gt; our new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build-and-publish-kjs.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you do this via IntelliJ IDEA’s “Commit and Push” functionality, please note that, depending on how your GitHub account is authenticated, you may encounter the following error when pushing a commit containing workflow files to your GitHub repository:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: failed to push some refs to &apos;https://github.com/SebastianAigner/kotlin-js-on-github-pages.git&apos;
To https://github.com/SebastianAigner/kotlin-js-on-github-pages.git
!	refs/heads/master:refs/heads/master	[remote rejected] (refusing to allow an OAuth App to create or update workflow `.github/workflows/build-and-publish-kjs.yml` without `workflow` scope)
Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because of an OAuth issue with GitHub requiring a specific scope to push workflow-modifying commits. You can find more info on it and &lt;a href=&quot;https://youtrack.jetbrains.com/issue/IDEA-247361&quot;&gt;vote on it here&lt;/a&gt;. Instead, you can commit the code via the terminal integrated in IntelliJ IDEA, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/h3rijixf4qmhfsezqpc4.png&quot; alt=&quot;git-push-origin-master&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the push has finished, we can watch the progress of our Kotlin/JS application being built and prepared for publishing in the “Actions” tab of our GitHub repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/ztnb7qdc5qpk4phezuqa.png&quot; alt=&quot;action_running&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-github-pages-&quot;&gt;Setting up GitHub Pages &lt;a name=&quot;gh-pages-setup&quot;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;After it finished, the workflow we created and triggered in the previous section put our final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.js&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; artifacts on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of our repository, just as we planned:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/r6lhyhlsxutuk9tux4oh.png&quot; alt=&quot;gh-pages-branch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s time to &lt;strong&gt;enable the GitHub Pages feature&lt;/strong&gt; of our repository, and point it to this branch. We can do this using the “Settings” tab.&lt;/p&gt;

&lt;p&gt;Somewhere close to the bottom, we can find a section labelled “GitHub Pages”. We select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ (root)&lt;/code&gt; (default) and hit “Save”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/66pf58m8og9xrbnzg01z.png&quot; alt=&quot;github-pages-enable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After saving our changes, scrolling back to this section reveals the &lt;strong&gt;URL under which our application is available&lt;/strong&gt;. (I have previously set up a custom domain for GitHub pages, so this one is used by default.) If you don’t have a &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site&quot;&gt;custom configuration&lt;/a&gt;, the URL of your application usually takes the shape of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;. Visiting this URL shows our Kotlin/JS application in all its glory, and for the world to see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/xr3ooqc9l4rgrpjia265.png&quot; alt=&quot;ready to be published&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can use this link to &lt;strong&gt;share your Kotlin/JS application&lt;/strong&gt; with friends and colleagues, or post it on your favorite news aggregator and wait for the upvotes to roll in! 😉&lt;/p&gt;

&lt;p&gt;(If your project is located in a private repository, you might want to change the GitHub Pages visibility. You can find more info on this in the &lt;a href=&quot;https://docs.github.com/en/github/working-with-github-pages/changing-the-visibility-of-your-github-pages-site&quot;&gt;GitHub docs&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;take-your-project-for-a-spin&quot;&gt;Take your project for a spin!&lt;/h2&gt;

&lt;p&gt;We’re done! From now on, whenever you push code, your project will automatically be built on GitHub’s CI servers. If a commit is faulty, you can see so on the web interface – and you will even be reminded via email!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/hvu8r28kptsqq99ys2rd.png&quot; alt=&quot;checks failed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pushing to the main branch of the repository means your page (which is reachable at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;.github.io/&amp;lt;reponame&amp;gt;&lt;/code&gt;) will &lt;strong&gt;automatically&lt;/strong&gt; be updated.&lt;/p&gt;

&lt;p&gt;And when somebody makes a pull request, build and test status is also shown &lt;strong&gt;directly in context&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/kotlin-js-on-gh-pages/u3wl5tcsahepdma6pbbq.png&quot; alt=&quot;pr failed&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;I hope you found this post useful. &lt;a href=&quot;https://github.com/features/actions&quot;&gt;GitHub Actions&lt;/a&gt; is a &lt;strong&gt;powerful, but also complex tool&lt;/strong&gt;, and I hope that these instructions make it a bit easier to get started together with Kotlin/JS. You can find the &lt;a href=&quot;https://github.com/SebastianAigner/kotlin-js-on-gh-pages&quot;&gt;sample project I used&lt;/a&gt; to create the screenshots for this tutorial on GitHub as well, and use it as a source of inspiration or template for a future project.&lt;/p&gt;

&lt;p&gt;If you’re interested in similar content, consider &lt;strong&gt;giving me a follow&lt;/strong&gt; to stay up to date.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&quot;https://twitter.com/hszanowski&quot;&gt;Jakub Chrzanowski&lt;/a&gt; for sharing some of his CI wisdom with me for this blog post.&lt;/em&gt;!&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="kotlin," /><category term="javascript," /><category term="github," /><category term="webdev" /><summary type="html">GitHub Pages is an easy way to host your Kotlin/JS application - and in combination with the continuous integration service GitHub Actions, you can easily set up a smooth development (and deployment!) experience for your projects. Read on to learn how you can build and test your application on GitHub’s CI, and get your Kotlin/JS web apps published for free.</summary></entry><entry><title type="html">Deploying server-side Kotlin Ktor applications on Dokku</title><link href="http://localhost:4000/general/2021/01/15/Deploying-server-side-Kotlin-Ktor-applications-on-Dokku.html" rel="alternate" type="text/html" title="Deploying server-side Kotlin Ktor applications on Dokku" /><published>2021-01-15T18:33:57+01:00</published><updated>2021-01-15T18:33:57+01:00</updated><id>http://localhost:4000/general/2021/01/15/Deploying-server-side-Kotlin-Ktor-applications-on-Dokku</id><content type="html" xml:base="http://localhost:4000/general/2021/01/15/Deploying-server-side-Kotlin-Ktor-applications-on-Dokku.html">&lt;p&gt;In my last article, I talked about “&lt;a href=&quot;https://dev.to/kotlin/publishing-server-side-kotlin-applications-ktor-on-heroku-2ce4&quot;&gt;Publishing server-side Kotlin applications built with Ktor on Heroku&lt;/a&gt;”. I really like &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; as a place to host my Kotlin apps because the time from setting up my application to having it available to the public is very short – I can confidently get my prototype applications running &lt;strong&gt;in the cloud in less than 10 minutes&lt;/strong&gt;, and even if I need a database or integration with some other service, it can be &lt;strong&gt;spun up in mere minutes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But there are also situations where I want to &lt;strong&gt;&lt;em&gt;own&lt;/em&gt; the deployment environment&lt;/strong&gt; for my Kotlin (mainly &lt;a href=&quot;https://ktor.io/&quot;&gt;Ktor&lt;/a&gt;) web applications – for example, when I’m deploying an app that’s running in my home network, or when I want to keep the application running without continuously having to pay for always-on Heroku instances. But even in those situations, I don’t want to give up all the &lt;strong&gt;convenience that I’ve gotten used to&lt;/strong&gt; when using Heroku.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&quot;http://dokku.viewdocs.io/dokku/&quot;&gt;Dokku&lt;/a&gt;, which unites the &lt;strong&gt;best of both worlds&lt;/strong&gt;. With the tagline &lt;em&gt;“The smallest PaaS implementation you’ve ever seen”&lt;/em&gt;, it’s an open-source run-it-yourself Platform as a Service (PaaS) based on Docker which makes it possible to push applications to production via Git. It can be easily installed on a Linux machine running in your home or rented from a hosting provider.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/llp1szahu8iipunwrki6.png&quot; alt=&quot;dokku_small&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the best part: in many ways, it’s actually compatible with the configuration we would use to deploy our application to Heroku, and generally provides a similar developer experience – even down to the level of &lt;a href=&quot;http://dokku.viewdocs.io/dokku/deployment/methods/herokuish-buildpacks/&quot;&gt;buildpacks&lt;/a&gt;, which automate most parts of the deployment process for us!&lt;/p&gt;

&lt;p&gt;However, because we are in control of the actual target platform ourselves, there are some key differences.&lt;/p&gt;

&lt;p&gt;In this post, I want to walk through how to &lt;strong&gt;deploy a&lt;/strong&gt; sample &lt;strong&gt;Kotlin application&lt;/strong&gt; (which uses &lt;strong&gt;Ktor&lt;/strong&gt;) to a &lt;strong&gt;Dokku installation&lt;/strong&gt;. Especially in the first part, you’ll see a lot of parallels to my previous article, as the configuration is very similar. As we work our way towards the actual deployment, however, you’ll notice a bunch of differences, which have prompted me to write a separate article for Dokku specifically.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;For this walkthrough, I assume that you already have a Dokku installation running – either in a virtual machine, on a server you rented with some provider, or on a machine on your home network. If that’s not the case, you can simply follow the installation instructions in Dokku’s excellent &lt;a href=&quot;http://dokku.viewdocs.io/dokku/getting-started/installation/&quot;&gt;documentation page&lt;/a&gt;. As long as you have a server running Debian or Ubuntu, there’s nothing standing in the way of spinning up your own Dokku instance with a single bootstrap command.&lt;/p&gt;

&lt;p&gt;Out of the box, Dokku already comes with a lot of the abstractions and tooling which makes app deployment a breeze – the notion of &lt;em&gt;applications&lt;/em&gt; (containerized via &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, hence the name), and &lt;em&gt;deployments&lt;/em&gt;, for example. It takes care of your HTTP routing (e.g. as sub-domains, depending on your &lt;a href=&quot;http://dokku.viewdocs.io/dokku/configuration/domains/&quot;&gt;virtualhost&lt;/a&gt; settings) with an automatically-managed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx&lt;/code&gt; instance, and can be extended through &lt;a href=&quot;http://dokku.viewdocs.io/dokku/advanced-usage/plugin-management/&quot;&gt;plugins&lt;/a&gt; to set up databases and other services right on your local machine.&lt;/p&gt;

&lt;p&gt;Before you move on to the next section, please also make sure that your local machine’s &lt;a href=&quot;http://dokku.viewdocs.io/dokku/getting-started/installation/#2-setup-ssh-key-and-virtualhost-settings&quot;&gt;SSH key is authorized&lt;/a&gt; with your Dokku installation – this is done either during first setup, or by &lt;a href=&quot;http://dokku.viewdocs.io/dokku/deployment/user-management/&quot;&gt;adding your key manually&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the development of the actual Ktor application, you should preferably have the latest version of &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With these things out of the way, we can get straight into the actual process!&lt;/p&gt;

&lt;h3 id=&quot;creating-our-ktor-application&quot;&gt;Creating our Ktor application&lt;/h3&gt;

&lt;p&gt;For simplicity’s sake, we can use the same simple “Hello, World” application shown in the tutorial for &lt;a href=&quot;https://dev.to/kotlin/publishing-server-side-kotlin-applications-ktor-on-heroku-2ce4&quot;&gt;Ktor on Heroku&lt;/a&gt;, so I’m going to keep this section brief. (Should you already have a Ktor project which you want to deploy, you can skip to the next section directly.)&lt;/p&gt;

&lt;p&gt;We can easily create a new Ktor project either via the online generator available at &lt;a href=&quot;https://start.ktor.io/&quot;&gt;https://start.ktor.io/&lt;/a&gt;, or use the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/10823-ktor&quot;&gt;Ktor IntelliJ IDEA plugin&lt;/a&gt; (both of which expose the same configuration options). I’m using the Ktor plugin (which can be accessed through File | New… | Project once installed). Here, we enable the “Gradle Kotlin DSL” option for the project, and add the “Routing” feature:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/0jqhzm41j63ism5nibgv.png&quot; alt=&quot;ktor-new-project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We input our desired project name and artifact ID on the pages that follow in the wizard. After waiting for Gradle to import, we have a ready-to-run minimal Ktor “Hello World” project. As usual, we can run it locally by navigating to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Application.kt&lt;/code&gt; file in our source directory, and pressing the “Run” button in the gutter next to the main function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/0mx708xvfx0orwh8pn5y.png&quot; alt=&quot;image2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the minimal local application setup done, we can move on to the interesting part – &lt;strong&gt;configuring the application Kotlin app to run on Dokku&lt;/strong&gt;!&lt;/p&gt;

&lt;h3 id=&quot;configuring-our-ktor-application-for-dokku-deployment&quot;&gt;Configuring our Ktor application for Dokku deployment&lt;/h3&gt;

&lt;p&gt;Dokku (and the Gradle buildpack it ships with) requires our application to fulfil three criteria (the same requirements as for Heroku):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Our application must &lt;strong&gt;respect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PORT&lt;/code&gt; environment variable&lt;/strong&gt;: Dokku &lt;a href=&quot;http://dokku.viewdocs.io/dokku/networking/port-management/#buildpacks&quot;&gt;assigns our application a port&lt;/a&gt; on which to listen for incoming requests, and Dokku’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx&lt;/code&gt;-based proxy then brings HTTP traffic to our application on that port. As specified in the documentation, this port is &lt;em&gt;usually&lt;/em&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5000&lt;/code&gt; – but this is not guaranteed, so it’s important we rely on the environment variable instead.&lt;/li&gt;
  &lt;li&gt;Our application needs to &lt;strong&gt;provide a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; task&lt;/strong&gt;: Dokku uses this task via &lt;a href=&quot;https://github.com/heroku/heroku-buildpack-gradle&quot;&gt;Heroku’s Gradle buildpack&lt;/a&gt; to turn our program into an executable when deploying.&lt;/li&gt;
  &lt;li&gt;Our application needs to &lt;strong&gt;provide a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt;&lt;/strong&gt;: This file specifies the command(s) which will be run when the application is started (more on this topic &lt;a href=&quot;http://dokku.viewdocs.io/dokku/deployment/methods/herokuish-buildpacks/#specifying-commands-via-procfile&quot;&gt;here&lt;/a&gt;) – so we need to point it at the executable which was generated during deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s briefly go over what we need to do to fill in each of the three criteria.&lt;/p&gt;

&lt;h4 id=&quot;the-port-environment-variable&quot;&gt;The PORT environment variable&lt;/h4&gt;

&lt;p&gt;Because the Ktor wizard comes with a clever default configuration, we don’t actually need to make any changes here – our app is already configured to respect the PORT environment variable. We can see this in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.conf&lt;/code&gt; file in the resources directory of our project. This &lt;a href=&quot;https://github.com/lightbend/config/blob/master/HOCON.md&quot;&gt;HOCON&lt;/a&gt; file sets the default port of our application to 8080, optionally overriding it with the content of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PORT&lt;/code&gt; environment variable when it is present:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;ktor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;deployment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{?&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;modules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sebi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ApplicationKt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is exactly what we want: When developing locally, our application is always assigned the same port, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8080&lt;/code&gt;, and when deploying to Dokku, the settings dictated by the environment are respected.&lt;/p&gt;

&lt;h4 id=&quot;the-stage-gradle-task&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; Gradle task&lt;/h4&gt;

&lt;p&gt;Dokku uses Heroku’s &lt;a href=&quot;http://dokku.viewdocs.io/dokku~v0.5.0/deployment/buildpacks/&quot;&gt;buildpack mechanism&lt;/a&gt; to turn the source code of our project into an executable during deployment, which can be run when the application is started. For Gradle applications, &lt;a href=&quot;https://devcenter.heroku.com/articles/deploying-gradle-apps-on-heroku#verify-that-your-build-file-is-set-up-correctly&quot;&gt;the buildpack&lt;/a&gt; looks for a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; task to create executable artifacts. The Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/application_plugin.html&quot;&gt;application plugin&lt;/a&gt;, which is included by default if you’ve created your application through the Ktor wizard, already comes with a task called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installDist&lt;/code&gt; which does exactly that. We can simply create an alias for it called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt;. If you have picked the Gradle Kotlin DSL as was suggested earlier in the tutorial, you can simply use this snippet to create a task which does nothing but execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;installDist&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;installDist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;the-procfile&quot;&gt;The Procfile&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://dokku.viewdocs.io/dokku/deployment/methods/herokuish-buildpacks/#specifying-commands-via-procfile&quot;&gt;Procfiles&lt;/a&gt; tell Dokku which binary or script should be executed when our application is started by the platform. We want to point this file at the output generated by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; task from the previous step. The Procfile only gets invoked once the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; task has already finished building our application, and a launch script in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build/install/projectName/bin/projectName&lt;/code&gt; has been created. We point Dokku to this script to get our application running. In the root of our project, let’s create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Procfile&lt;/code&gt; and add the following content to it (with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projectName&lt;/code&gt; being substituted with the name of our project):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;web: ./build/install/projectName/bin/projectName
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this, we have prepared our application for deployment on Dokku! For now, these instructions were very similar to an app targeting Heroku (always great not having to learn the same thing twice!) – but this is also the point where configurations will start to become more Dokku-specific.&lt;/p&gt;

&lt;h3 id=&quot;actually-deploying-our-application&quot;&gt;Actually deploying our application&lt;/h3&gt;

&lt;h4 id=&quot;setting-up-a-local-git-repository&quot;&gt;Setting up a local Git repository&lt;/h4&gt;

&lt;p&gt;To get our source code onto our Dokku instance, we push it via Git – for that, we need a local repository and a Git remote which resides on our Dokku server, and that is associated with the “app” (the set of Dokku configurations relating to our project) we want to deploy.&lt;/p&gt;

&lt;p&gt;For this, we need to create a local repository for our project, which can be done directly from IntelliJ IDEA with the command VCS | Enable Version Control Integration….&lt;/p&gt;

&lt;p&gt;Next, we need to commit our project locally. In IntelliJ IDEA, navigate to the “Commit” tool window on the left side, and commit all unversioned files. (Don’t worry about manually excluding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/build&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/idea&lt;/code&gt; folders – the Ktor project wizard already auto-generated a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file for us which takes care of them.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/4z1bu7mstj6i28gbctc6.png&quot; alt=&quot;initial_commit_dokku_clean&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;creating-the-dokku-application--deploying-&quot;&gt;Creating the Dokku application &amp;amp; Deploying! 🚀&lt;/h4&gt;

&lt;p&gt;Whereas Heroku comes with a fancy tool to create an application through a local command line via the &lt;a href=&quot;https://devcenter.heroku.com/articles/creating-apps&quot;&gt;Heroku CLI&lt;/a&gt;, doing the same on Dokku is a tiny bit more involved – but can still be done in a hot minute. &lt;a href=&quot;http://dokku.viewdocs.io/dokku~v0.20.4/deployment/application-deployment/&quot;&gt;Dokku’s docs&lt;/a&gt; (heh) contain extensive information about the general process. For us, it boils down to the following.&lt;/p&gt;

&lt;p&gt;We establish a connection to our Dokku host via SSH, substituting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.dokku.host&lt;/code&gt; with the appropriate values:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh root@my.dokku.host
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the Dokku host, we create a new app for our Ktor application:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@my.dokku.host:~# dokku apps:create myprojectname
-----&amp;gt; Creating myprojectname...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This sets up a set of configurations for our application on the server, and also sets up a Git repository on our Dokku server.&lt;/p&gt;

&lt;p&gt;Once the creation process has finished, it’s time to go back to our local application and wire up this new Git remote. Every time we want to deploy a new version of our application, we will simply push to that remote, Dokku will trigger our buildpack, and start our application.&lt;/p&gt;

&lt;p&gt;There are two simple ways to add our Dokku host as a Git remote for our local repository: via the command line, and via IntelliJ IDEA’s Git user interface.&lt;/p&gt;

&lt;p&gt;To add the remote via the Git command line client, we execute the following command in the root of our local project, substituting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.dokku.host&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myprojectname&lt;/code&gt; for the appropriate values:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add dokku dokku@my.dokku.host:myprojectname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This adds a remote called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku&lt;/code&gt; which points to a Git repository on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my.dokku.host&lt;/code&gt; called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myprojectname&lt;/code&gt; which is associated with the Dokku app and configuration of the same name.&lt;/p&gt;

&lt;p&gt;We can also use the IntelliJ IDEA user interface to do the same thing. To add the remote, we navigate to VCS | Manage Remotes….&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/z7mgqp63fd1tmz6uhf5v.png&quot; alt=&quot;remotes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This opens up a new window which allows us to, as the name suggests, manage our Git remotes. By pressing the “+” button, we define a new remote, and fill in the required information – we call the remote &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku&lt;/code&gt; and set its URL to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku@my.dokku.host:myprojectname&lt;/code&gt;, substituting host and project name:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/cdhfwkyw5ant0pdl8z76.png&quot; alt=&quot;define_dokku_remote_staggered&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just like that, we’re ready for lift-off! We trigger the deploy of our application to our Dokku instance by pushing the commit we made in the previous section to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku&lt;/code&gt; Git remote we just introduced. We can do this via IntelliJ IDEA through VCS | Git | Push…, or via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; on the terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/emw8df0jzx5nimykeuz6.png&quot; alt=&quot;dokku_push&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We confirm the push, and now just have to wait until our application arrives on our Dokku instance! This push is going to take longer than you might be used to, because Dokku builds our application immediately when we push it (and even rejects the push if the application fails to build!). If you’re interested in following along with the progress, you can open the “Git” tool window at the bottom of IntelliJ IDEA to see what is happening in the background. If everything has gone according to plan, you will see a confirming message in the logs:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remote:        BUILD SUCCESSFUL in 1m 29s        
remote:        6 actionable tasks: 6 executed        
remote: -----&amp;gt; Discovering process types        
remote:        Procfile declares types -&amp;gt; web        
remote: -----&amp;gt; Releasing myprojectname...        
remote: -----&amp;gt; Deploying myprojectname...        
remote: -----&amp;gt; App Procfile file found        
remote: -----&amp;gt; DOKKU_SCALE file exists        
remote: =====&amp;gt; Processing deployment checks        
remote:        No CHECKS file found. Simple container checks will be performed.        
remote: -----&amp;gt; Attempting pre-flight checks (web.1)        
remote:        Waiting for 10 seconds ...        
remote:        Default container check successful!        
remote: -----&amp;gt; Running post-deploy        
remote: -----&amp;gt; Creating new app virtual host file...        
remote: -----&amp;gt; Configuring myprojectname.my.dokku.host...(using built-in template)        
remote: -----&amp;gt; Creating http nginx.conf        
remote:        Reloading nginx        
remote: -----&amp;gt; Renaming containers        
remote:        Renaming container (7405ef19e607) vibrant_curran to myprojectname.web.1        
remote: -----&amp;gt; Checking for postdeploy task        
remote:        No postdeploy task found, skipping        
remote: =====&amp;gt; Application deployed:        
remote:        http://myprojectname.my.dokku.host        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s navigate to the link of our project, which we can see in the last line, and observe our application, running on our Dokku instance! Just like that, you get to celebrate the deployment of your application on the net!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ktor_on_dokku/9cmpkp8lveowc9mm9wi1.png&quot; alt=&quot;Hello, Dokku!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h3&gt;

&lt;p&gt;As you may have noticed, our application is available on our Dokku host now – but only in an unencrypted fashion (note the lack of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt; in the address bar). Thankfully, we live in the age of &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;LetsEncrypt&lt;/a&gt; offering free TLS certificates, and Dokku makes it easy to enable automatic certificate retrieval and setup for our application via the &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt&quot;&gt;dokku-letsencrypt&lt;/a&gt; plugin. I strongly recommend setting up this plugin so that people using our application can enjoy securely encrypted web-traffic. Once installed (see &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt#installation&quot;&gt;installation&lt;/a&gt; and &lt;a href=&quot;https://github.com/dokku/dokku-letsencrypt#usage&quot;&gt;initial setup instructions&lt;/a&gt;), we can enable the LetsEncrypt integration for our application with a single command:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@my.dokku.host:~# dokku letsencrypt myprojectname
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like other convenient Platforms as a Service, Dokku provides a ton of &lt;a href=&quot;http://dokku.viewdocs.io/dokku~v0.7.2/community/plugins/&quot;&gt;plugins&lt;/a&gt; which allow you to equip your application with self-hosted databases, key-value-stores, search indices, and more. Explore the plugins page in Dokku’s documentation and see for yourself what plugins are available. With just a few shell commands, you can enable all of them for your Ktor application as well, and use them directly from your Kotlin code. And because you are hosting your own Dokku instance, you won’t be billed on the number of rows in your database or how many megabytes of object storage your application is using.&lt;/p&gt;

&lt;p&gt;Generally, we have seen how to set up a simple workflow for publishing new changes of our Kotlin application to our Dokku server: make the change, commit the change, push the change to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dokku master&lt;/code&gt; – and after just a minute or two, our change will be visible when visiting the URL of our application on our Dokku host.&lt;/p&gt;

&lt;h3 id=&quot;thank-you-for-reading-&quot;&gt;Thank you for reading! 🤗&lt;/h3&gt;

&lt;p&gt;I really enjoy using Dokku for deploying my side-projects to the web, because for me personally, it strikes the perfect &lt;strong&gt;balance between convenience&lt;/strong&gt; (I don’t have to spend too much time on the &lt;em&gt;ops&lt;/em&gt; part of devops) &lt;strong&gt;and control&lt;/strong&gt; (I can still own the infrastructure, and it’s easy for me to provision new services at &lt;strong&gt;no extra cost&lt;/strong&gt;, even when I use them intensively).&lt;/p&gt;

&lt;p&gt;I hope you found this tutorial helpful. If you have any questions or ideas about what to cover next, please let me know, and &lt;strong&gt;get in touch here or on &lt;a href=&quot;https://twitter.com/sebi_io&quot;&gt;Twitter&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;</content><author><name></name></author><category term="general" /><summary type="html">In my last article, I talked about “Publishing server-side Kotlin applications built with Ktor on Heroku”. I really like Heroku as a place to host my Kotlin apps because the time from setting up my application to having it available to the public is very short – I can confidently get my prototype applications running in the cloud in less than 10 minutes, and even if I need a database or integration with some other service, it can be spun up in mere minutes.</summary></entry></feed>